
MCP2515.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c38  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000cac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  00800060  00800060  00000cac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cdc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002712  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d56  00000000  00000000  0000363a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000121f  00000000  00000000  00004390  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005dc  00000000  00000000  000055b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b64  00000000  00000000  00005b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001840  00000000  00000000  000066f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00007f30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 39       	cpi	r26, 0x90	; 144
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 36 02 	call	0x46c	; 0x46c <main>
  8a:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EXTI_Init>:
 * brief this function used to enable and configure the selected INIT 
 * param : Handler is pointer to struct hold all INIT configurations 
 * return : void 
 */
void EXTI_Init(EXIT_Handler_t * Handler)
{
  92:	fc 01       	movw	r30, r24
	
	if(Handler->EXTI_NUM == EXTI_NUM_2) /* INIT2 only available for edge detection */
  94:	80 81       	ld	r24, Z
  96:	81 11       	cpse	r24, r1
  98:	0b c0       	rjmp	.+22     	; 0xb0 <EXTI_Init+0x1e>
	{
		if(Handler->EXTI_EDGE_DETECTION == EXTI_EDGE_FAILING_EDGE)
  9a:	81 81       	ldd	r24, Z+1	; 0x01
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	21 f4       	brne	.+8      	; 0xa8 <EXTI_Init+0x16>
			MCUCSR &=~(1<<ISC2);
  a0:	84 b7       	in	r24, 0x34	; 52
  a2:	8f 7b       	andi	r24, 0xBF	; 191
  a4:	84 bf       	out	0x34, r24	; 52
  a6:	1d c0       	rjmp	.+58     	; 0xe2 <EXTI_Init+0x50>
		else
			MCUCSR |= (1<<ISC2);
  a8:	84 b7       	in	r24, 0x34	; 52
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	84 bf       	out	0x34, r24	; 52
  ae:	19 c0       	rjmp	.+50     	; 0xe2 <EXTI_Init+0x50>
		
	}else{   /* set configurations for INIT1 or INIT2  */
		
		MCUCR &=~(0x0f);
  b0:	85 b7       	in	r24, 0x35	; 53
  b2:	80 7f       	andi	r24, 0xF0	; 240
  b4:	85 bf       	out	0x35, r24	; 53
		if(Handler->EXTI_NUM == EXTI_NUM_0)
  b6:	20 81       	ld	r18, Z
  b8:	21 30       	cpi	r18, 0x01	; 1
  ba:	29 f4       	brne	.+10     	; 0xc6 <EXTI_Init+0x34>
		{
		MCUCR |= Handler->EXTI_EDGE_DETECTION;
  bc:	95 b7       	in	r25, 0x35	; 53
  be:	81 81       	ldd	r24, Z+1	; 0x01
  c0:	89 2b       	or	r24, r25
  c2:	85 bf       	out	0x35, r24	; 53
  c4:	0e c0       	rjmp	.+28     	; 0xe2 <EXTI_Init+0x50>
		}
		else
		{
		MCUCR |= (Handler->EXTI_EDGE_DETECTION<<(2*Handler->EXTI_NUM));
  c6:	45 b7       	in	r20, 0x35	; 53
  c8:	91 81       	ldd	r25, Z+1	; 0x01
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	89 2f       	mov	r24, r25
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <EXTI_Init+0x48>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	2a 95       	dec	r18
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <EXTI_Init+0x44>
  de:	84 2b       	or	r24, r20
  e0:	85 bf       	out	0x35, r24	; 53
		}
		
	}
	
	
	GICR |= (1<<(5+Handler->EXTI_NUM));  /* enable the required INIT */
  e2:	4b b7       	in	r20, 0x3b	; 59
  e4:	20 81       	ld	r18, Z
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	2b 5f       	subi	r18, 0xFB	; 251
  ea:	3f 4f       	sbci	r19, 0xFF	; 255
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <EXTI_Init+0x64>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	2a 95       	dec	r18
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <EXTI_Init+0x60>
  fa:	84 2b       	or	r24, r20
  fc:	8b bf       	out	0x3b, r24	; 59
	
	sei();
  fe:	78 94       	sei
 100:	08 95       	ret

00000102 <HAL_GPIO_INIT_PIN>:
	}
	else
	{
		return GPIO_PIN_RESET ;
	}
}
 102:	dc 01       	movw	r26, r24
 104:	fb 01       	movw	r30, r22
 106:	81 81       	ldd	r24, Z+1	; 0x01
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	99 f4       	brne	.+38     	; 0x132 <HAL_GPIO_INIT_PIN+0x30>
 10c:	80 81       	ld	r24, Z
 10e:	11 96       	adiw	r26, 0x01	; 1
 110:	9c 91       	ld	r25, X
 112:	11 97       	sbiw	r26, 0x01	; 1
 114:	89 2b       	or	r24, r25
 116:	11 96       	adiw	r26, 0x01	; 1
 118:	8c 93       	st	X, r24
 11a:	11 97       	sbiw	r26, 0x01	; 1
 11c:	82 81       	ldd	r24, Z+2	; 0x02
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	81 f4       	brne	.+32     	; 0x142 <HAL_GPIO_INIT_PIN+0x40>
 122:	80 81       	ld	r24, Z
 124:	12 96       	adiw	r26, 0x02	; 2
 126:	9c 91       	ld	r25, X
 128:	12 97       	sbiw	r26, 0x02	; 2
 12a:	89 2b       	or	r24, r25
 12c:	12 96       	adiw	r26, 0x02	; 2
 12e:	8c 93       	st	X, r24
 130:	08 95       	ret
 132:	90 81       	ld	r25, Z
 134:	90 95       	com	r25
 136:	11 96       	adiw	r26, 0x01	; 1
 138:	8c 91       	ld	r24, X
 13a:	11 97       	sbiw	r26, 0x01	; 1
 13c:	98 23       	and	r25, r24
 13e:	11 96       	adiw	r26, 0x01	; 1
 140:	9c 93       	st	X, r25
 142:	08 95       	ret

00000144 <HAL_GPIO_WRITEPIN>:

void HAL_GPIO_WRITEPIN(GPIO_TypeDef * PORT,uint8_t PIN_NUM,GPIO_PinState PIN_STATE)
{
	if(PIN_STATE != GPIO_PIN_RESET)
 144:	44 23       	and	r20, r20
 146:	29 f0       	breq	.+10     	; 0x152 <HAL_GPIO_WRITEPIN+0xe>
	{
		PORT->PORT_REG |= PIN_NUM ;
 148:	fc 01       	movw	r30, r24
 14a:	22 81       	ldd	r18, Z+2	; 0x02
 14c:	62 2b       	or	r22, r18
 14e:	62 83       	std	Z+2, r22	; 0x02
 150:	08 95       	ret
	}
	else
	{
		PORT->PORT_REG &= ~(PIN_NUM);
 152:	60 95       	com	r22
 154:	fc 01       	movw	r30, r24
 156:	22 81       	ldd	r18, Z+2	; 0x02
 158:	62 23       	and	r22, r18
 15a:	62 83       	std	Z+2, r22	; 0x02
 15c:	08 95       	ret

0000015e <HAL_GPIO_WRITEPORT>:
	}
	
}

void HAL_GPIO_WRITEPORT(GPIO_TypeDef * PORT,uint8_t PINS,GPIO_PinState PINS_STATE)
{
 15e:	fc 01       	movw	r30, r24
	PORT->PORT_REG &=~(PINS);
 160:	60 95       	com	r22
 162:	92 81       	ldd	r25, Z+2	; 0x02
 164:	69 23       	and	r22, r25
	PORT->PORT_REG |=(PINS_STATE);
 166:	46 2b       	or	r20, r22
 168:	42 83       	std	Z+2, r20	; 0x02
 16a:	08 95       	ret

0000016c <HAL_SPI_Init>:
		while(!(SPI_PREPH->SPI_SPSR & SPI_SPSR_SPIF));  /* wait till the spi send byte and set SPIIF bit */
		++(Handler->RxBuffer);
		--(Handler->RxBufferSize);
	}	
	HAL_GPIO_WRITEPIN(GPIOB,SPI_PIN_SS,GPIO_PIN_SET);	
}/* END_FUN HAL_SPI_Recieve()*/
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	00 d0       	rcall	.+0      	; 0x176 <HAL_SPI_Init+0xa>
 176:	1f 92       	push	r1
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
 17c:	8c 01       	movw	r16, r24
 17e:	fc 01       	movw	r30, r24
 180:	83 81       	ldd	r24, Z+3	; 0x03
 182:	88 23       	and	r24, r24
 184:	44 f4       	brge	.+16     	; 0x196 <HAL_SPI_Init+0x2a>
 186:	9d b1       	in	r25, 0x0d	; 13
 188:	83 70       	andi	r24, 0x03	; 3
 18a:	89 2b       	or	r24, r25
 18c:	8d b9       	out	0x0d, r24	; 13
 18e:	8e b1       	in	r24, 0x0e	; 14
 190:	81 60       	ori	r24, 0x01	; 1
 192:	8e b9       	out	0x0e, r24	; 14
 194:	04 c0       	rjmp	.+8      	; 0x19e <HAL_SPI_Init+0x32>
 196:	9d b1       	in	r25, 0x0d	; 13
 198:	83 70       	andi	r24, 0x03	; 3
 19a:	89 2b       	or	r24, r25
 19c:	8d b9       	out	0x0d, r24	; 13
 19e:	f8 01       	movw	r30, r16
 1a0:	80 81       	ld	r24, Z
 1a2:	84 ff       	sbrs	r24, 4
 1a4:	16 c0       	rjmp	.+44     	; 0x1d2 <HAL_SPI_Init+0x66>
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	8a 83       	std	Y+2, r24	; 0x02
 1aa:	80 eb       	ldi	r24, 0xB0	; 176
 1ac:	89 83       	std	Y+1, r24	; 0x01
 1ae:	be 01       	movw	r22, r28
 1b0:	6f 5f       	subi	r22, 0xFF	; 255
 1b2:	7f 4f       	sbci	r23, 0xFF	; 255
 1b4:	86 e3       	ldi	r24, 0x36	; 54
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 81 00 	call	0x102	; 0x102 <HAL_GPIO_INIT_PIN>
 1bc:	1a 82       	std	Y+2, r1	; 0x02
 1be:	80 e4       	ldi	r24, 0x40	; 64
 1c0:	89 83       	std	Y+1, r24	; 0x01
 1c2:	be 01       	movw	r22, r28
 1c4:	6f 5f       	subi	r22, 0xFF	; 255
 1c6:	7f 4f       	sbci	r23, 0xFF	; 255
 1c8:	86 e3       	ldi	r24, 0x36	; 54
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 81 00 	call	0x102	; 0x102 <HAL_GPIO_INIT_PIN>
 1d0:	15 c0       	rjmp	.+42     	; 0x1fc <HAL_SPI_Init+0x90>
 1d2:	1a 82       	std	Y+2, r1	; 0x02
 1d4:	80 eb       	ldi	r24, 0xB0	; 176
 1d6:	89 83       	std	Y+1, r24	; 0x01
 1d8:	be 01       	movw	r22, r28
 1da:	6f 5f       	subi	r22, 0xFF	; 255
 1dc:	7f 4f       	sbci	r23, 0xFF	; 255
 1de:	86 e3       	ldi	r24, 0x36	; 54
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 81 00 	call	0x102	; 0x102 <HAL_GPIO_INIT_PIN>
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	8a 83       	std	Y+2, r24	; 0x02
 1ea:	80 e4       	ldi	r24, 0x40	; 64
 1ec:	89 83       	std	Y+1, r24	; 0x01
 1ee:	be 01       	movw	r22, r28
 1f0:	6f 5f       	subi	r22, 0xFF	; 255
 1f2:	7f 4f       	sbci	r23, 0xFF	; 255
 1f4:	86 e3       	ldi	r24, 0x36	; 54
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 81 00 	call	0x102	; 0x102 <HAL_GPIO_INIT_PIN>
 1fc:	f8 01       	movw	r30, r16
 1fe:	42 81       	ldd	r20, Z+2	; 0x02
 200:	81 81       	ldd	r24, Z+1	; 0x01
 202:	34 81       	ldd	r19, Z+4	; 0x04
 204:	25 81       	ldd	r18, Z+5	; 0x05
 206:	90 81       	ld	r25, Z
 208:	84 2b       	or	r24, r20
 20a:	83 2b       	or	r24, r19
 20c:	82 2b       	or	r24, r18
 20e:	89 2b       	or	r24, r25
 210:	8d b9       	out	0x0d, r24	; 13
 212:	8d b1       	in	r24, 0x0d	; 13
 214:	80 64       	ori	r24, 0x40	; 64
 216:	8d b9       	out	0x0d, r24	; 13
 218:	85 81       	ldd	r24, Z+5	; 0x05
 21a:	80 38       	cpi	r24, 0x80	; 128
 21c:	09 f4       	brne	.+2      	; 0x220 <HAL_SPI_Init+0xb4>
 21e:	78 94       	sei
 220:	0f 90       	pop	r0
 222:	0f 90       	pop	r0
 224:	0f 90       	pop	r0
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	08 95       	ret

00000230 <HAL_SPI_Transmit>:
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	ec 01       	movw	r28, r24
 236:	19 86       	std	Y+9, r1	; 0x09
 238:	18 86       	std	Y+8, r1	; 0x08
 23a:	1d 86       	std	Y+13, r1	; 0x0d
 23c:	1c 86       	std	Y+12, r1	; 0x0c
 23e:	7f 83       	std	Y+7, r23	; 0x07
 240:	6e 83       	std	Y+6, r22	; 0x06
 242:	5b 87       	std	Y+11, r21	; 0x0b
 244:	4a 87       	std	Y+10, r20	; 0x0a
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	60 e1       	ldi	r22, 0x10	; 16
 24a:	86 e3       	ldi	r24, 0x36	; 54
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 a2 00 	call	0x144	; 0x144 <HAL_GPIO_WRITEPIN>
 252:	0b c0       	rjmp	.+22     	; 0x26a <HAL_SPI_Transmit+0x3a>
 254:	ee 81       	ldd	r30, Y+6	; 0x06
 256:	ff 81       	ldd	r31, Y+7	; 0x07
 258:	80 81       	ld	r24, Z
 25a:	8f b9       	out	0x0f, r24	; 15
 25c:	77 9b       	sbis	0x0e, 7	; 14
 25e:	fe cf       	rjmp	.-4      	; 0x25c <HAL_SPI_Transmit+0x2c>
 260:	8e 81       	ldd	r24, Y+6	; 0x06
 262:	9f 81       	ldd	r25, Y+7	; 0x07
 264:	01 96       	adiw	r24, 0x01	; 1
 266:	9f 83       	std	Y+7, r25	; 0x07
 268:	8e 83       	std	Y+6, r24	; 0x06
 26a:	8a 85       	ldd	r24, Y+10	; 0x0a
 26c:	9b 85       	ldd	r25, Y+11	; 0x0b
 26e:	9c 01       	movw	r18, r24
 270:	21 50       	subi	r18, 0x01	; 1
 272:	31 09       	sbc	r19, r1
 274:	3b 87       	std	Y+11, r19	; 0x0b
 276:	2a 87       	std	Y+10, r18	; 0x0a
 278:	89 2b       	or	r24, r25
 27a:	61 f7       	brne	.-40     	; 0x254 <HAL_SPI_Transmit+0x24>
 27c:	41 e0       	ldi	r20, 0x01	; 1
 27e:	60 e1       	ldi	r22, 0x10	; 16
 280:	86 e3       	ldi	r24, 0x36	; 54
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 a2 00 	call	0x144	; 0x144 <HAL_GPIO_WRITEPIN>
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	08 95       	ret

0000028e <HAL_SPI_TransmitRecive>:
 * param. : pTxData --> pointer to the Tx buffer 
 * param. : pRxData --> pointer to the rx buffer
 * param. : size : the required number of bytes to received and transmit 
*/
 void HAL_SPI_TransmitRecive(SPI_Handler_t * Handler,uint8_t * pTxData,uint8_t * pRxData,uint16_t size )
{
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	ec 01       	movw	r28, r24
	Handler->RxBuffer = pRxData ;
 294:	59 87       	std	Y+9, r21	; 0x09
 296:	48 87       	std	Y+8, r20	; 0x08
	Handler->TxBuffer = pTxData  ;
 298:	7f 83       	std	Y+7, r23	; 0x07
 29a:	6e 83       	std	Y+6, r22	; 0x06
	Handler->RxBufferSize = size ;
 29c:	3d 87       	std	Y+13, r19	; 0x0d
 29e:	2c 87       	std	Y+12, r18	; 0x0c
	Handler->TxBufferSize = size;
 2a0:	3b 87       	std	Y+11, r19	; 0x0b
 2a2:	2a 87       	std	Y+10, r18	; 0x0a

	HAL_GPIO_WRITEPIN(GPIOB,SPI_PIN_SS,GPIO_PIN_RESET);
 2a4:	40 e0       	ldi	r20, 0x00	; 0
 2a6:	60 e1       	ldi	r22, 0x10	; 16
 2a8:	86 e3       	ldi	r24, 0x36	; 54
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 a2 00 	call	0x144	; 0x144 <HAL_GPIO_WRITEPIN>

	while(Handler->RxBufferSize-- > 0)  /* block till end operation */
 2b0:	14 c0       	rjmp	.+40     	; 0x2da <HAL_SPI_TransmitRecive+0x4c>
	{

		SPI_PREPH->SPI_SPDR = *(Handler->TxBuffer);
 2b2:	ee 81       	ldd	r30, Y+6	; 0x06
 2b4:	ff 81       	ldd	r31, Y+7	; 0x07
 2b6:	80 81       	ld	r24, Z
 2b8:	8f b9       	out	0x0f, r24	; 15
		while(!(SPI_PREPH->SPI_SPSR & SPI_SPSR_SPIF));  /* wait till the SPI send byte and set SPIIF bit */
 2ba:	77 9b       	sbis	0x0e, 7	; 14
 2bc:	fe cf       	rjmp	.-4      	; 0x2ba <HAL_SPI_TransmitRecive+0x2c>
		*(Handler->RxBuffer) = SPI_PREPH->SPI_SPDR ;
 2be:	e8 85       	ldd	r30, Y+8	; 0x08
 2c0:	f9 85       	ldd	r31, Y+9	; 0x09
 2c2:	8f b1       	in	r24, 0x0f	; 15
 2c4:	80 83       	st	Z, r24
		++(Handler->RxBuffer);
 2c6:	88 85       	ldd	r24, Y+8	; 0x08
 2c8:	99 85       	ldd	r25, Y+9	; 0x09
 2ca:	01 96       	adiw	r24, 0x01	; 1
 2cc:	99 87       	std	Y+9, r25	; 0x09
 2ce:	88 87       	std	Y+8, r24	; 0x08
		++(Handler->TxBuffer);
 2d0:	8e 81       	ldd	r24, Y+6	; 0x06
 2d2:	9f 81       	ldd	r25, Y+7	; 0x07
 2d4:	01 96       	adiw	r24, 0x01	; 1
 2d6:	9f 83       	std	Y+7, r25	; 0x07
 2d8:	8e 83       	std	Y+6, r24	; 0x06
	Handler->RxBufferSize = size ;
	Handler->TxBufferSize = size;

	HAL_GPIO_WRITEPIN(GPIOB,SPI_PIN_SS,GPIO_PIN_RESET);

	while(Handler->RxBufferSize-- > 0)  /* block till end operation */
 2da:	8c 85       	ldd	r24, Y+12	; 0x0c
 2dc:	9d 85       	ldd	r25, Y+13	; 0x0d
 2de:	9c 01       	movw	r18, r24
 2e0:	21 50       	subi	r18, 0x01	; 1
 2e2:	31 09       	sbc	r19, r1
 2e4:	3d 87       	std	Y+13, r19	; 0x0d
 2e6:	2c 87       	std	Y+12, r18	; 0x0c
 2e8:	89 2b       	or	r24, r25
 2ea:	19 f7       	brne	.-58     	; 0x2b2 <HAL_SPI_TransmitRecive+0x24>
		*(Handler->RxBuffer) = SPI_PREPH->SPI_SPDR ;
		++(Handler->RxBuffer);
		++(Handler->TxBuffer);
		
	}	
	HAL_GPIO_WRITEPIN(GPIOB,SPI_PIN_SS,GPIO_PIN_SET);
 2ec:	41 e0       	ldi	r20, 0x01	; 1
 2ee:	60 e1       	ldi	r22, 0x10	; 16
 2f0:	86 e3       	ldi	r24, 0x36	; 54
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 a2 00 	call	0x144	; 0x144 <HAL_GPIO_WRITEPIN>
	
}/* END_FUN HAL_TransmitRecive()*/
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <LCD_Triger_Enable>:
	itoa(IntegerToDisplay,StringToDisplay,10);
	for (uint16_t i=0;i<NumberOfDigits;i++)
	LCD_Send_A_Character_With_CurrLoc(' ');
	
	LCD_Send_A_String_WithLoc(y,x,StringToDisplay);
}
 2fe:	41 e0       	ldi	r20, 0x01	; 1
 300:	68 e0       	ldi	r22, 0x08	; 8
 302:	86 e3       	ldi	r24, 0x36	; 54
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 a2 00 	call	0x144	; 0x144 <HAL_GPIO_WRITEPIN>
 30a:	85 e0       	ldi	r24, 0x05	; 5
 30c:	8a 95       	dec	r24
 30e:	f1 f7       	brne	.-4      	; 0x30c <LCD_Triger_Enable+0xe>
 310:	00 00       	nop
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	68 e0       	ldi	r22, 0x08	; 8
 316:	86 e3       	ldi	r24, 0x36	; 54
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 a2 00 	call	0x144	; 0x144 <HAL_GPIO_WRITEPIN>
 31e:	8f e3       	ldi	r24, 0x3F	; 63
 320:	9f e1       	ldi	r25, 0x1F	; 31
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <LCD_Triger_Enable+0x24>
 326:	00 c0       	rjmp	.+0      	; 0x328 <LCD_Triger_Enable+0x2a>
 328:	00 00       	nop
 32a:	08 95       	ret

0000032c <LCD_Send_4BitData>:
 32c:	cf 93       	push	r28
 32e:	c8 2f       	mov	r28, r24
 330:	48 2f       	mov	r20, r24
 332:	40 7f       	andi	r20, 0xF0	; 240
 334:	60 ef       	ldi	r22, 0xF0	; 240
 336:	89 e3       	ldi	r24, 0x39	; 57
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 af 00 	call	0x15e	; 0x15e <HAL_GPIO_WRITEPORT>
 33e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LCD_Triger_Enable>
 342:	80 e1       	ldi	r24, 0x10	; 16
 344:	c8 9f       	mul	r28, r24
 346:	a0 01       	movw	r20, r0
 348:	11 24       	eor	r1, r1
 34a:	60 ef       	ldi	r22, 0xF0	; 240
 34c:	89 e3       	ldi	r24, 0x39	; 57
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 af 00 	call	0x15e	; 0x15e <HAL_GPIO_WRITEPORT>
 354:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LCD_Triger_Enable>
 358:	cf 91       	pop	r28
 35a:	08 95       	ret

0000035c <LCD_Send_A_Character_With_CurrLoc>:
 35c:	cf 93       	push	r28
 35e:	c8 2f       	mov	r28, r24
 360:	41 e0       	ldi	r20, 0x01	; 1
 362:	62 e0       	ldi	r22, 0x02	; 2
 364:	86 e3       	ldi	r24, 0x36	; 54
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 a2 00 	call	0x144	; 0x144 <HAL_GPIO_WRITEPIN>
 36c:	40 e0       	ldi	r20, 0x00	; 0
 36e:	64 e0       	ldi	r22, 0x04	; 4
 370:	86 e3       	ldi	r24, 0x36	; 54
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 a2 00 	call	0x144	; 0x144 <HAL_GPIO_WRITEPIN>
 378:	8c 2f       	mov	r24, r28
 37a:	0e 94 96 01 	call	0x32c	; 0x32c <LCD_Send_4BitData>
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <LCD_Send_A_Command>:
 382:	cf 93       	push	r28
 384:	c8 2f       	mov	r28, r24
 386:	40 e0       	ldi	r20, 0x00	; 0
 388:	66 e0       	ldi	r22, 0x06	; 6
 38a:	86 e3       	ldi	r24, 0x36	; 54
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 a2 00 	call	0x144	; 0x144 <HAL_GPIO_WRITEPIN>
 392:	8c 2f       	mov	r24, r28
 394:	0e 94 96 01 	call	0x32c	; 0x32c <LCD_Send_4BitData>
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <LCD_Send_A_String_With_CurrLoc>:
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	ec 01       	movw	r28, r24
 3a2:	03 c0       	rjmp	.+6      	; 0x3aa <LCD_Send_A_String_With_CurrLoc+0xe>
 3a4:	21 96       	adiw	r28, 0x01	; 1
 3a6:	0e 94 ae 01 	call	0x35c	; 0x35c <LCD_Send_A_Character_With_CurrLoc>
 3aa:	88 81       	ld	r24, Y
 3ac:	81 11       	cpse	r24, r1
 3ae:	fa cf       	rjmp	.-12     	; 0x3a4 <LCD_Send_A_String_With_CurrLoc+0x8>
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	08 95       	ret

000003b6 <LCD_Initializaion>:
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	2f ef       	ldi	r18, 0xFF	; 255
 3bc:	89 ef       	ldi	r24, 0xF9	; 249
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	21 50       	subi	r18, 0x01	; 1
 3c2:	80 40       	sbci	r24, 0x00	; 0
 3c4:	90 40       	sbci	r25, 0x00	; 0
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <LCD_Initializaion+0xa>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <LCD_Initializaion+0x14>
 3ca:	00 00       	nop
 3cc:	c0 e6       	ldi	r28, 0x60	; 96
 3ce:	d0 e0       	ldi	r29, 0x00	; 0
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	89 83       	std	Y+1, r24	; 0x01
 3d4:	8e e0       	ldi	r24, 0x0E	; 14
 3d6:	88 83       	st	Y, r24
 3d8:	1a 82       	std	Y+2, r1	; 0x02
 3da:	be 01       	movw	r22, r28
 3dc:	86 e3       	ldi	r24, 0x36	; 54
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 81 00 	call	0x102	; 0x102 <HAL_GPIO_INIT_PIN>
 3e4:	80 ef       	ldi	r24, 0xF0	; 240
 3e6:	88 83       	st	Y, r24
 3e8:	be 01       	movw	r22, r28
 3ea:	89 e3       	ldi	r24, 0x39	; 57
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 81 00 	call	0x102	; 0x102 <HAL_GPIO_INIT_PIN>
 3f2:	83 e3       	ldi	r24, 0x33	; 51
 3f4:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_Send_A_Command>
 3f8:	82 e3       	ldi	r24, 0x32	; 50
 3fa:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_Send_A_Command>
 3fe:	88 e2       	ldi	r24, 0x28	; 40
 400:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_Send_A_Command>
 404:	8c e0       	ldi	r24, 0x0C	; 12
 406:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_Send_A_Command>
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_Send_A_Command>
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	08 95       	ret

00000416 <LCD_Send_An_Integer_With_CurrLoc>:
	LCD_Send_A_Character_With_CurrLoc('.');
	LCD_Send_An_Integer_With_CurrLoc(decimalValue,5);
}

void LCD_Send_An_Integer_With_CurrLoc(uint16_t IntegerToDisplay, uint8_t NumberOfDigits)
{
 416:	ef 92       	push	r14
 418:	ff 92       	push	r15
 41a:	0f 93       	push	r16
 41c:	1f 93       	push	r17
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	cd b7       	in	r28, 0x3d	; 61
 424:	de b7       	in	r29, 0x3e	; 62
		uint8_t StringToDisplay[NumberOfDigits];
		itoa(IntegerToDisplay,StringToDisplay,10);
		LCD_Send_A_String_With_CurrLoc(StringToDisplay);
	
}
 426:	ed b6       	in	r14, 0x3d	; 61
 428:	fe b6       	in	r15, 0x3e	; 62
	LCD_Send_An_Integer_With_CurrLoc(decimalValue,5);
}

void LCD_Send_An_Integer_With_CurrLoc(uint16_t IntegerToDisplay, uint8_t NumberOfDigits)
{
		uint8_t StringToDisplay[NumberOfDigits];
 42a:	2d b7       	in	r18, 0x3d	; 61
 42c:	3e b7       	in	r19, 0x3e	; 62
 42e:	26 1b       	sub	r18, r22
 430:	31 09       	sbc	r19, r1
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	f8 94       	cli
 436:	3e bf       	out	0x3e, r19	; 62
 438:	0f be       	out	0x3f, r0	; 63
 43a:	2d bf       	out	0x3d, r18	; 61
 43c:	0d b7       	in	r16, 0x3d	; 61
 43e:	1e b7       	in	r17, 0x3e	; 62
 440:	0f 5f       	subi	r16, 0xFF	; 255
 442:	1f 4f       	sbci	r17, 0xFF	; 255
		itoa(IntegerToDisplay,StringToDisplay,10);
 444:	4a e0       	ldi	r20, 0x0A	; 10
 446:	50 e0       	ldi	r21, 0x00	; 0
 448:	b8 01       	movw	r22, r16
 44a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <itoa>
		LCD_Send_A_String_With_CurrLoc(StringToDisplay);
 44e:	c8 01       	movw	r24, r16
 450:	0e 94 ce 01 	call	0x39c	; 0x39c <LCD_Send_A_String_With_CurrLoc>
	
}
 454:	0f b6       	in	r0, 0x3f	; 63
 456:	f8 94       	cli
 458:	fe be       	out	0x3e, r15	; 62
 45a:	0f be       	out	0x3f, r0	; 63
 45c:	ed be       	out	0x3d, r14	; 61
 45e:	df 91       	pop	r29
 460:	cf 91       	pop	r28
 462:	1f 91       	pop	r17
 464:	0f 91       	pop	r16
 466:	ff 90       	pop	r15
 468:	ef 90       	pop	r14
 46a:	08 95       	ret

0000046c <main>:
CANMesg_t TXMesg ;
CANMesg_t RecievedMesg ;
uint8_t counter ;
int main(void)
{
	DDRD = 0xe0;
 46c:	80 ee       	ldi	r24, 0xE0	; 224
 46e:	81 bb       	out	0x11, r24	; 17
	TXMesg.CANControl.EXT_Field = 1 ;
 470:	e6 e8       	ldi	r30, 0x86	; 134
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	80 81       	ld	r24, Z
 476:	80 61       	ori	r24, 0x10	; 16
	TXMesg.CANControl.LEN_Field = 8;
 478:	80 7f       	andi	r24, 0xF0	; 240
	TXMesg.CANControl.RTR_Field = 0;
 47a:	88 60       	ori	r24, 0x08	; 8
 47c:	8f 7d       	andi	r24, 0xDF	; 223
 47e:	80 83       	st	Z, r24
	TXMesg.ID = 0xff9 ;
 480:	e2 e8       	ldi	r30, 0x82	; 130
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	89 ef       	ldi	r24, 0xF9	; 249
 486:	9f e0       	ldi	r25, 0x0F	; 15
 488:	a0 e0       	ldi	r26, 0x00	; 0
 48a:	b0 e0       	ldi	r27, 0x00	; 0
 48c:	80 83       	st	Z, r24
 48e:	91 83       	std	Z+1, r25	; 0x01
 490:	a2 83       	std	Z+2, r26	; 0x02
 492:	b3 83       	std	Z+3, r27	; 0x03
	TXMesg.MesgData[0] = 1;
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	85 83       	std	Z+5, r24	; 0x05
	TXMesg.MesgData[1] = 2;
 498:	82 e0       	ldi	r24, 0x02	; 2
 49a:	86 83       	std	Z+6, r24	; 0x06
	TXMesg.MesgData[2] = 3;
 49c:	83 e0       	ldi	r24, 0x03	; 3
 49e:	87 83       	std	Z+7, r24	; 0x07
	TXMesg.MesgData[3] = 4;
 4a0:	84 e0       	ldi	r24, 0x04	; 4
 4a2:	80 87       	std	Z+8, r24	; 0x08
	
	MCP2515_init();
 4a4:	0e 94 3d 04 	call	0x87a	; 0x87a <MCP2515_init>
	LCD_Initializaion();
 4a8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_Initializaion>
    /* Replace with your application code */
    while (1) 
    {
		LCD_Send_An_Integer_With_CurrLoc(counter,3);
 4ac:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <counter>
 4b0:	63 e0       	ldi	r22, 0x03	; 3
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	0e 94 0b 02 	call	0x416	; 0x416 <LCD_Send_An_Integer_With_CurrLoc>
		MCP2515_SendCANmsg(&TXMesg,0);
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	82 e8       	ldi	r24, 0x82	; 130
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 72 04 	call	0x8e4	; 0x8e4 <MCP2515_SendCANmsg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c2:	2f ef       	ldi	r18, 0xFF	; 255
 4c4:	83 ec       	ldi	r24, 0xC3	; 195
 4c6:	99 e0       	ldi	r25, 0x09	; 9
 4c8:	21 50       	subi	r18, 0x01	; 1
 4ca:	80 40       	sbci	r24, 0x00	; 0
 4cc:	90 40       	sbci	r25, 0x00	; 0
 4ce:	e1 f7       	brne	.-8      	; 0x4c8 <main+0x5c>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <main+0x66>
 4d2:	00 00       	nop
		_delay_ms(200);
		LCD_Send_A_Command(LCD_COMMANED_CLEAR_LCD);
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_Send_A_Command>
 4da:	e8 cf       	rjmp	.-48     	; 0x4ac <main+0x40>

000004dc <__vector_1>:
    }
}

ISR(INT0_vect)
{
 4dc:	1f 92       	push	r1
 4de:	0f 92       	push	r0
 4e0:	0f b6       	in	r0, 0x3f	; 63
 4e2:	0f 92       	push	r0
 4e4:	11 24       	eor	r1, r1
 4e6:	2f 93       	push	r18
 4e8:	3f 93       	push	r19
 4ea:	4f 93       	push	r20
 4ec:	5f 93       	push	r21
 4ee:	6f 93       	push	r22
 4f0:	7f 93       	push	r23
 4f2:	8f 93       	push	r24
 4f4:	9f 93       	push	r25
 4f6:	af 93       	push	r26
 4f8:	bf 93       	push	r27
 4fa:	ef 93       	push	r30
 4fc:	ff 93       	push	r31

	counter++;
 4fe:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <counter>
 502:	8f 5f       	subi	r24, 0xFF	; 255
 504:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <counter>

	MCP2515_receiveMesg(&RecievedMesg);
 508:	83 e7       	ldi	r24, 0x73	; 115
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0e 94 53 05 	call	0xaa6	; 0xaa6 <MCP2515_receiveMesg>

	PORTD = 0x80;
 510:	80 e8       	ldi	r24, 0x80	; 128
 512:	82 bb       	out	0x12, r24	; 18

 514:	ff 91       	pop	r31
 516:	ef 91       	pop	r30
 518:	bf 91       	pop	r27
 51a:	af 91       	pop	r26
 51c:	9f 91       	pop	r25
 51e:	8f 91       	pop	r24
 520:	7f 91       	pop	r23
 522:	6f 91       	pop	r22
 524:	5f 91       	pop	r21
 526:	4f 91       	pop	r20
 528:	3f 91       	pop	r19
 52a:	2f 91       	pop	r18
 52c:	0f 90       	pop	r0
 52e:	0f be       	out	0x3f, r0	; 63
 530:	0f 90       	pop	r0
 532:	1f 90       	pop	r1
 534:	18 95       	reti

00000536 <MCP2515_Read_Register>:
 * brief : this function used read command to read data from MCP specified register 
 * param : AddREG register addr that you need to read from 
 * return : the readed data 
 */
PUBLIC uint8_t MCP2515_Read_Register(uint8_t AddREG)
{
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	00 d0       	rcall	.+0      	; 0x53c <MCP2515_Read_Register+0x6>
 53c:	1f 92       	push	r1
 53e:	cd b7       	in	r28, 0x3d	; 61
 540:	de b7       	in	r29, 0x3e	; 62
	uint8_t Instruction[] = {READ_INSTRUCTION,AddREG,0x00} ;
 542:	93 e0       	ldi	r25, 0x03	; 3
 544:	99 83       	std	Y+1, r25	; 0x01
 546:	8a 83       	std	Y+2, r24	; 0x02
 548:	1b 82       	std	Y+3, r1	; 0x03
	HAL_SPI_TransmitRecive(&MCP2515_SPIHandler,Instruction,Instruction,3);
 54a:	23 e0       	ldi	r18, 0x03	; 3
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	ae 01       	movw	r20, r28
 550:	4f 5f       	subi	r20, 0xFF	; 255
 552:	5f 4f       	sbci	r21, 0xFF	; 255
 554:	ba 01       	movw	r22, r20
 556:	85 e6       	ldi	r24, 0x65	; 101
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0e 94 47 01 	call	0x28e	; 0x28e <HAL_SPI_TransmitRecive>
	return Instruction[2] ;



}/* END_FUN MCP2515_Read_Register() */
 55e:	8b 81       	ldd	r24, Y+3	; 0x03
 560:	0f 90       	pop	r0
 562:	0f 90       	pop	r0
 564:	0f 90       	pop	r0
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	08 95       	ret

0000056c <MCP2515_Write_Register>:
 * param : AddREG register addr that you need to write data to 
 * param : value the value that you need to write to the register 
 * return : void 
 */
PUBLIC void MCP2515_Write_Register(uint8_t AddREG,uint8_t value)
{
 56c:	cf 93       	push	r28
 56e:	df 93       	push	r29
 570:	00 d0       	rcall	.+0      	; 0x572 <MCP2515_Write_Register+0x6>
 572:	1f 92       	push	r1
 574:	cd b7       	in	r28, 0x3d	; 61
 576:	de b7       	in	r29, 0x3e	; 62
	uint8_t Instruction[] = {WRITE_INSTRUCTION,AddREG,value} ;
 578:	92 e0       	ldi	r25, 0x02	; 2
 57a:	99 83       	std	Y+1, r25	; 0x01
 57c:	8a 83       	std	Y+2, r24	; 0x02
 57e:	6b 83       	std	Y+3, r22	; 0x03
	HAL_SPI_Transmit(&MCP2515_SPIHandler,Instruction,3);
 580:	43 e0       	ldi	r20, 0x03	; 3
 582:	50 e0       	ldi	r21, 0x00	; 0
 584:	be 01       	movw	r22, r28
 586:	6f 5f       	subi	r22, 0xFF	; 255
 588:	7f 4f       	sbci	r23, 0xFF	; 255
 58a:	85 e6       	ldi	r24, 0x65	; 101
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	0e 94 18 01 	call	0x230	; 0x230 <HAL_SPI_Transmit>


}/* END_FUN MCP2515_Write_Register() */
 592:	0f 90       	pop	r0
 594:	0f 90       	pop	r0
 596:	0f 90       	pop	r0
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	08 95       	ret

0000059e <MCP2515_Rest>:
 * brief : this function used make software reset 
 * param : void 
 * return : void  
 */
PUBLIC void MCP2515_Rest(void)
{
 59e:	cf 93       	push	r28
 5a0:	df 93       	push	r29
 5a2:	1f 92       	push	r1
 5a4:	cd b7       	in	r28, 0x3d	; 61
 5a6:	de b7       	in	r29, 0x3e	; 62
	uint8_t Instruction = RESET_INSTRUCTION ;
 5a8:	80 ec       	ldi	r24, 0xC0	; 192
 5aa:	89 83       	std	Y+1, r24	; 0x01
	HAL_SPI_Transmit(&MCP2515_SPIHandler,&Instruction,1);
 5ac:	41 e0       	ldi	r20, 0x01	; 1
 5ae:	50 e0       	ldi	r21, 0x00	; 0
 5b0:	be 01       	movw	r22, r28
 5b2:	6f 5f       	subi	r22, 0xFF	; 255
 5b4:	7f 4f       	sbci	r23, 0xFF	; 255
 5b6:	85 e6       	ldi	r24, 0x65	; 101
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	0e 94 18 01 	call	0x230	; 0x230 <HAL_SPI_Transmit>
 5be:	2f ef       	ldi	r18, 0xFF	; 255
 5c0:	89 ef       	ldi	r24, 0xF9	; 249
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	21 50       	subi	r18, 0x01	; 1
 5c6:	80 40       	sbci	r24, 0x00	; 0
 5c8:	90 40       	sbci	r25, 0x00	; 0
 5ca:	e1 f7       	brne	.-8      	; 0x5c4 <MCP2515_Rest+0x26>
 5cc:	00 c0       	rjmp	.+0      	; 0x5ce <MCP2515_Rest+0x30>
 5ce:	00 00       	nop
	_delay_ms(20);



}/* END_FUN MCP2515_Rest() */
 5d0:	0f 90       	pop	r0
 5d2:	df 91       	pop	r29
 5d4:	cf 91       	pop	r28
 5d6:	08 95       	ret

000005d8 <MCP2515_SetBitTiming>:
 * param : rCNF2 CAN interface register 2
 * param : rCNF3 CAN interface register 3
 * return : void  
 */
PUBLIC void MCP2515_SetBitTiming(uint8_t rCNF1,uint8_t rCNF2,uint8_t rCNF3)
{
 5d8:	cf 93       	push	r28
 5da:	df 93       	push	r29
 5dc:	d6 2f       	mov	r29, r22
 5de:	c4 2f       	mov	r28, r20

	MCP2515_Write_Register(CNF1,rCNF1);
 5e0:	68 2f       	mov	r22, r24
 5e2:	8a e2       	ldi	r24, 0x2A	; 42
 5e4:	0e 94 b6 02 	call	0x56c	; 0x56c <MCP2515_Write_Register>
	MCP2515_Write_Register(CNF2,rCNF2);
 5e8:	6d 2f       	mov	r22, r29
 5ea:	89 e2       	ldi	r24, 0x29	; 41
 5ec:	0e 94 b6 02 	call	0x56c	; 0x56c <MCP2515_Write_Register>
	MCP2515_Write_Register(CNF3,rCNF3);
 5f0:	6c 2f       	mov	r22, r28
 5f2:	88 e2       	ldi	r24, 0x28	; 40
 5f4:	0e 94 b6 02 	call	0x56c	; 0x56c <MCP2515_Write_Register>
	
	
	
}/* END_FUN MCP2515_SetBitTiming() */
 5f8:	df 91       	pop	r29
 5fa:	cf 91       	pop	r28
 5fc:	08 95       	ret

000005fe <MCP2515_Set_OperMode>:
 * brief : this function used set MCP mode operation 
 * param : mode 
 * return : void  
 */
PUBLIC void MCP2515_Set_OperMode(uint8_t mode)
{
 5fe:	cf 93       	push	r28
 600:	df 93       	push	r29
 602:	00 d0       	rcall	.+0      	; 0x604 <MCP2515_Set_OperMode+0x6>
 604:	1f 92       	push	r1
 606:	cd b7       	in	r28, 0x3d	; 61
 608:	de b7       	in	r29, 0x3e	; 62
	uint8_t Instruction[] = {WRITE_INSTRUCTION,CANCTRL,mode} ;
 60a:	92 e0       	ldi	r25, 0x02	; 2
 60c:	99 83       	std	Y+1, r25	; 0x01
 60e:	9f e0       	ldi	r25, 0x0F	; 15
 610:	9a 83       	std	Y+2, r25	; 0x02
 612:	8b 83       	std	Y+3, r24	; 0x03
	HAL_SPI_Transmit(&MCP2515_SPIHandler,Instruction,3);
 614:	43 e0       	ldi	r20, 0x03	; 3
 616:	50 e0       	ldi	r21, 0x00	; 0
 618:	be 01       	movw	r22, r28
 61a:	6f 5f       	subi	r22, 0xFF	; 255
 61c:	7f 4f       	sbci	r23, 0xFF	; 255
 61e:	85 e6       	ldi	r24, 0x65	; 101
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	0e 94 18 01 	call	0x230	; 0x230 <HAL_SPI_Transmit>



}/* END_FUN MCP2515_Set_OperMode() */
 626:	0f 90       	pop	r0
 628:	0f 90       	pop	r0
 62a:	0f 90       	pop	r0
 62c:	df 91       	pop	r29
 62e:	cf 91       	pop	r28
 630:	08 95       	ret

00000632 <MCP2515_SetMask>:
 * param : ID Identifier number
 * param : EXT used to determine if EXT identifier or normal id 
 * return : void  
 */
PUBLIC void MCP2515_SetMask(uint8_t n , uint32_t ID ,bool EXT)
{
 632:	cf 92       	push	r12
 634:	df 92       	push	r13
 636:	ef 92       	push	r14
 638:	ff 92       	push	r15
 63a:	cf 93       	push	r28
 63c:	c8 2f       	mov	r28, r24
 63e:	6a 01       	movw	r12, r20
 640:	7b 01       	movw	r14, r22
	

	if (EXT)  // the length of ID is 29 bit
 642:	22 23       	and	r18, r18
 644:	09 f4       	brne	.+2      	; 0x648 <MCP2515_SetMask+0x16>
 646:	4a c0       	rjmp	.+148    	; 0x6dc <MCP2515_SetMask+0xaa>
	{
		MCP2515_Write_Register(RXMnSIDH(n),(uint8_t)(ID>>(uint8_t)3));
 648:	cb 01       	movw	r24, r22
 64a:	ba 01       	movw	r22, r20
 64c:	68 94       	set
 64e:	12 f8       	bld	r1, 2
 650:	96 95       	lsr	r25
 652:	87 95       	ror	r24
 654:	77 95       	ror	r23
 656:	67 95       	ror	r22
 658:	16 94       	lsr	r1
 65a:	d1 f7       	brne	.-12     	; 0x650 <MCP2515_SetMask+0x1e>
 65c:	2c 2f       	mov	r18, r28
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	28 5f       	subi	r18, 0xF8	; 248
 662:	3f 4f       	sbci	r19, 0xFF	; 255
 664:	82 2f       	mov	r24, r18
 666:	88 0f       	add	r24, r24
 668:	88 0f       	add	r24, r24
 66a:	0e 94 b6 02 	call	0x56c	; 0x56c <MCP2515_Write_Register>
		MCP2515_Write_Register(RXMnSIDL(n),(uint8_t)((ID<<(uint8_t)5)|(ID>>(uint8_t)27)|(1<<EXIDE)));
 66e:	d7 01       	movw	r26, r14
 670:	c6 01       	movw	r24, r12
 672:	07 2e       	mov	r0, r23
 674:	7b e1       	ldi	r23, 0x1B	; 27
 676:	b6 95       	lsr	r27
 678:	a7 95       	ror	r26
 67a:	97 95       	ror	r25
 67c:	87 95       	ror	r24
 67e:	7a 95       	dec	r23
 680:	d1 f7       	brne	.-12     	; 0x676 <MCP2515_SetMask+0x44>
 682:	70 2d       	mov	r23, r0
 684:	cc 0f       	add	r28, r28
 686:	cc 0f       	add	r28, r28
 688:	6c 2d       	mov	r22, r12
 68a:	62 95       	swap	r22
 68c:	66 0f       	add	r22, r22
 68e:	60 7e       	andi	r22, 0xE0	; 224
 690:	86 2b       	or	r24, r22
 692:	68 2f       	mov	r22, r24
 694:	68 60       	ori	r22, 0x08	; 8
 696:	81 e2       	ldi	r24, 0x21	; 33
 698:	8c 0f       	add	r24, r28
 69a:	0e 94 b6 02 	call	0x56c	; 0x56c <MCP2515_Write_Register>
		MCP2515_Write_Register(RXMnEID0(n),(uint8_t)(ID>>(uint8_t)11));
 69e:	c7 01       	movw	r24, r14
 6a0:	b6 01       	movw	r22, r12
 6a2:	05 2e       	mov	r0, r21
 6a4:	5b e0       	ldi	r21, 0x0B	; 11
 6a6:	96 95       	lsr	r25
 6a8:	87 95       	ror	r24
 6aa:	77 95       	ror	r23
 6ac:	67 95       	ror	r22
 6ae:	5a 95       	dec	r21
 6b0:	d1 f7       	brne	.-12     	; 0x6a6 <MCP2515_SetMask+0x74>
 6b2:	50 2d       	mov	r21, r0
 6b4:	83 e2       	ldi	r24, 0x23	; 35
 6b6:	8c 0f       	add	r24, r28
 6b8:	0e 94 b6 02 	call	0x56c	; 0x56c <MCP2515_Write_Register>
		MCP2515_Write_Register(RXMnEID8(n),(uint8_t)(ID>>(uint8_t)19));
 6bc:	c7 01       	movw	r24, r14
 6be:	b6 01       	movw	r22, r12
 6c0:	05 2e       	mov	r0, r21
 6c2:	53 e1       	ldi	r21, 0x13	; 19
 6c4:	96 95       	lsr	r25
 6c6:	87 95       	ror	r24
 6c8:	77 95       	ror	r23
 6ca:	67 95       	ror	r22
 6cc:	5a 95       	dec	r21
 6ce:	d1 f7       	brne	.-12     	; 0x6c4 <MCP2515_SetMask+0x92>
 6d0:	50 2d       	mov	r21, r0
 6d2:	82 e2       	ldi	r24, 0x22	; 34
 6d4:	8c 0f       	add	r24, r28
 6d6:	0e 94 b6 02 	call	0x56c	; 0x56c <MCP2515_Write_Register>
 6da:	1d c0       	rjmp	.+58     	; 0x716 <MCP2515_SetMask+0xe4>
	}
	else
	{
		MCP2515_Write_Register(RXMnSIDH(n),(uint8_t)(ID>>(uint8_t)3));
 6dc:	cb 01       	movw	r24, r22
 6de:	ba 01       	movw	r22, r20
 6e0:	68 94       	set
 6e2:	12 f8       	bld	r1, 2
 6e4:	96 95       	lsr	r25
 6e6:	87 95       	ror	r24
 6e8:	77 95       	ror	r23
 6ea:	67 95       	ror	r22
 6ec:	16 94       	lsr	r1
 6ee:	d1 f7       	brne	.-12     	; 0x6e4 <MCP2515_SetMask+0xb2>
 6f0:	2c 2f       	mov	r18, r28
 6f2:	30 e0       	ldi	r19, 0x00	; 0
 6f4:	28 5f       	subi	r18, 0xF8	; 248
 6f6:	3f 4f       	sbci	r19, 0xFF	; 255
 6f8:	82 2f       	mov	r24, r18
 6fa:	88 0f       	add	r24, r24
 6fc:	88 0f       	add	r24, r24
 6fe:	0e 94 b6 02 	call	0x56c	; 0x56c <MCP2515_Write_Register>
		MCP2515_Write_Register(RXMnSIDL(n),(uint8_t)(ID<<(uint8_t)5));
 702:	6c 2d       	mov	r22, r12
 704:	62 95       	swap	r22
 706:	66 0f       	add	r22, r22
 708:	60 7e       	andi	r22, 0xE0	; 224
 70a:	8c 2f       	mov	r24, r28
 70c:	88 0f       	add	r24, r24
 70e:	88 0f       	add	r24, r24
 710:	8f 5d       	subi	r24, 0xDF	; 223
 712:	0e 94 b6 02 	call	0x56c	; 0x56c <MCP2515_Write_Register>
	}




}/* END_FUN MCP2515_SetMask() */
 716:	cf 91       	pop	r28
 718:	ff 90       	pop	r15
 71a:	ef 90       	pop	r14
 71c:	df 90       	pop	r13
 71e:	cf 90       	pop	r12
 720:	08 95       	ret

00000722 <MCP2515_SetFilter>:
 * param : ID Identifier number
 * param : EXT used to determine if EXT identifier or normal id 
 * return : void  
 */
PUBLIC void MCP2515_SetFilter( uint8_t n, uint32_t ID ,bool EXT )
{
 722:	cf 92       	push	r12
 724:	df 92       	push	r13
 726:	ef 92       	push	r14
 728:	ff 92       	push	r15
 72a:	cf 93       	push	r28
 72c:	df 93       	push	r29
 72e:	c8 2f       	mov	r28, r24
 730:	6a 01       	movw	r12, r20
 732:	7b 01       	movw	r14, r22

	if (EXT)  // the length of ID is 29 bit
 734:	22 23       	and	r18, r18
 736:	09 f4       	brne	.+2      	; 0x73a <MCP2515_SetFilter+0x18>
 738:	5c c0       	rjmp	.+184    	; 0x7f2 <MCP2515_SetFilter+0xd0>
	{
		MCP2515_Write_Register(RXFnSIDH(n),(uint8_t)(ID>>(uint8_t)3));
 73a:	cb 01       	movw	r24, r22
 73c:	ba 01       	movw	r22, r20
 73e:	68 94       	set
 740:	12 f8       	bld	r1, 2
 742:	96 95       	lsr	r25
 744:	87 95       	ror	r24
 746:	77 95       	ror	r23
 748:	67 95       	ror	r22
 74a:	16 94       	lsr	r1
 74c:	d1 f7       	brne	.-12     	; 0x742 <MCP2515_SetFilter+0x20>
 74e:	dc 2f       	mov	r29, r28
 750:	dd 0f       	add	r29, r29
 752:	dd 0f       	add	r29, r29
 754:	c3 30       	cpi	r28, 0x03	; 3
 756:	10 f0       	brcs	.+4      	; 0x75c <MCP2515_SetFilter+0x3a>
 758:	24 e0       	ldi	r18, 0x04	; 4
 75a:	01 c0       	rjmp	.+2      	; 0x75e <MCP2515_SetFilter+0x3c>
 75c:	20 e0       	ldi	r18, 0x00	; 0
 75e:	82 2f       	mov	r24, r18
 760:	8d 0f       	add	r24, r29
 762:	0e 94 b6 02 	call	0x56c	; 0x56c <MCP2515_Write_Register>
		MCP2515_Write_Register(RXFnSIDL(n),(uint8_t)((ID<<(uint8_t)5)|(ID>>(uint8_t)27)|(1<<EXIDE)));
 766:	8c 2d       	mov	r24, r12
 768:	82 95       	swap	r24
 76a:	88 0f       	add	r24, r24
 76c:	80 7e       	andi	r24, 0xE0	; 224
 76e:	b7 01       	movw	r22, r14
 770:	a6 01       	movw	r20, r12
 772:	03 2e       	mov	r0, r19
 774:	3b e1       	ldi	r19, 0x1B	; 27
 776:	76 95       	lsr	r23
 778:	67 95       	ror	r22
 77a:	57 95       	ror	r21
 77c:	47 95       	ror	r20
 77e:	3a 95       	dec	r19
 780:	d1 f7       	brne	.-12     	; 0x776 <MCP2515_SetFilter+0x54>
 782:	30 2d       	mov	r19, r0
 784:	48 2b       	or	r20, r24
 786:	64 2f       	mov	r22, r20
 788:	68 60       	ori	r22, 0x08	; 8
 78a:	c3 30       	cpi	r28, 0x03	; 3
 78c:	10 f0       	brcs	.+4      	; 0x792 <MCP2515_SetFilter+0x70>
 78e:	84 e0       	ldi	r24, 0x04	; 4
 790:	01 c0       	rjmp	.+2      	; 0x794 <MCP2515_SetFilter+0x72>
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	8d 0f       	add	r24, r29
 796:	8f 5f       	subi	r24, 0xFF	; 255
 798:	0e 94 b6 02 	call	0x56c	; 0x56c <MCP2515_Write_Register>
		MCP2515_Write_Register(RXFnEID0(n),(uint8_t)(ID>>(uint8_t)11));
 79c:	c7 01       	movw	r24, r14
 79e:	b6 01       	movw	r22, r12
 7a0:	05 2e       	mov	r0, r21
 7a2:	5b e0       	ldi	r21, 0x0B	; 11
 7a4:	96 95       	lsr	r25
 7a6:	87 95       	ror	r24
 7a8:	77 95       	ror	r23
 7aa:	67 95       	ror	r22
 7ac:	5a 95       	dec	r21
 7ae:	d1 f7       	brne	.-12     	; 0x7a4 <MCP2515_SetFilter+0x82>
 7b0:	50 2d       	mov	r21, r0
 7b2:	c3 30       	cpi	r28, 0x03	; 3
 7b4:	10 f0       	brcs	.+4      	; 0x7ba <MCP2515_SetFilter+0x98>
 7b6:	24 e0       	ldi	r18, 0x04	; 4
 7b8:	01 c0       	rjmp	.+2      	; 0x7bc <MCP2515_SetFilter+0x9a>
 7ba:	20 e0       	ldi	r18, 0x00	; 0
 7bc:	2d 0f       	add	r18, r29
 7be:	83 e0       	ldi	r24, 0x03	; 3
 7c0:	82 0f       	add	r24, r18
 7c2:	0e 94 b6 02 	call	0x56c	; 0x56c <MCP2515_Write_Register>
		MCP2515_Write_Register(RXFnEID8(n),(uint8_t)(ID>>(uint8_t)19));
 7c6:	c7 01       	movw	r24, r14
 7c8:	b6 01       	movw	r22, r12
 7ca:	05 2e       	mov	r0, r21
 7cc:	53 e1       	ldi	r21, 0x13	; 19
 7ce:	96 95       	lsr	r25
 7d0:	87 95       	ror	r24
 7d2:	77 95       	ror	r23
 7d4:	67 95       	ror	r22
 7d6:	5a 95       	dec	r21
 7d8:	d1 f7       	brne	.-12     	; 0x7ce <MCP2515_SetFilter+0xac>
 7da:	50 2d       	mov	r21, r0
 7dc:	c3 30       	cpi	r28, 0x03	; 3
 7de:	10 f0       	brcs	.+4      	; 0x7e4 <MCP2515_SetFilter+0xc2>
 7e0:	24 e0       	ldi	r18, 0x04	; 4
 7e2:	01 c0       	rjmp	.+2      	; 0x7e6 <MCP2515_SetFilter+0xc4>
 7e4:	20 e0       	ldi	r18, 0x00	; 0
 7e6:	2d 0f       	add	r18, r29
 7e8:	82 e0       	ldi	r24, 0x02	; 2
 7ea:	82 0f       	add	r24, r18
 7ec:	0e 94 b6 02 	call	0x56c	; 0x56c <MCP2515_Write_Register>
 7f0:	23 c0       	rjmp	.+70     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
	}
	else
	{
		MCP2515_Write_Register(RXFnSIDH(n),(uint8_t)(ID>>(uint8_t)3));
 7f2:	cb 01       	movw	r24, r22
 7f4:	ba 01       	movw	r22, r20
 7f6:	68 94       	set
 7f8:	12 f8       	bld	r1, 2
 7fa:	96 95       	lsr	r25
 7fc:	87 95       	ror	r24
 7fe:	77 95       	ror	r23
 800:	67 95       	ror	r22
 802:	16 94       	lsr	r1
 804:	d1 f7       	brne	.-12     	; 0x7fa <MCP2515_SetFilter+0xd8>
 806:	dc 2f       	mov	r29, r28
 808:	dd 0f       	add	r29, r29
 80a:	dd 0f       	add	r29, r29
 80c:	c3 30       	cpi	r28, 0x03	; 3
 80e:	10 f0       	brcs	.+4      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 810:	24 e0       	ldi	r18, 0x04	; 4
 812:	01 c0       	rjmp	.+2      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 814:	20 e0       	ldi	r18, 0x00	; 0
 816:	82 2f       	mov	r24, r18
 818:	8d 0f       	add	r24, r29
 81a:	0e 94 b6 02 	call	0x56c	; 0x56c <MCP2515_Write_Register>
		MCP2515_Write_Register(RXFnSIDL(n),(uint8_t)(ID<<(uint8_t)5));
 81e:	6c 2d       	mov	r22, r12
 820:	62 95       	swap	r22
 822:	66 0f       	add	r22, r22
 824:	60 7e       	andi	r22, 0xE0	; 224
 826:	c3 30       	cpi	r28, 0x03	; 3
 828:	10 f0       	brcs	.+4      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 82a:	84 e0       	ldi	r24, 0x04	; 4
 82c:	01 c0       	rjmp	.+2      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 82e:	80 e0       	ldi	r24, 0x00	; 0
 830:	8d 0f       	add	r24, r29
 832:	8f 5f       	subi	r24, 0xFF	; 255
 834:	0e 94 b6 02 	call	0x56c	; 0x56c <MCP2515_Write_Register>
	}



}/* END_FUN MCP2515_SetFilter() */
 838:	df 91       	pop	r29
 83a:	cf 91       	pop	r28
 83c:	ff 90       	pop	r15
 83e:	ef 90       	pop	r14
 840:	df 90       	pop	r13
 842:	cf 90       	pop	r12
 844:	08 95       	ret

00000846 <MCP2515_Enable_Interrupt>:
 * brief : this function used set interrupt 
 * param : void
 * return : void  
 */
PUBLIC void MCP2515_Enable_Interrupt(uint8_t Init_Condition)
{
 846:	cf 93       	push	r28
 848:	df 93       	push	r29
 84a:	00 d0       	rcall	.+0      	; 0x84c <MCP2515_Enable_Interrupt+0x6>
 84c:	1f 92       	push	r1
 84e:	cd b7       	in	r28, 0x3d	; 61
 850:	de b7       	in	r29, 0x3e	; 62
	uint8_t Instruction[] = {WRITE_INSTRUCTION,CANINTE,Init_Condition} ;
 852:	92 e0       	ldi	r25, 0x02	; 2
 854:	99 83       	std	Y+1, r25	; 0x01
 856:	9b e2       	ldi	r25, 0x2B	; 43
 858:	9a 83       	std	Y+2, r25	; 0x02
 85a:	8b 83       	std	Y+3, r24	; 0x03
	HAL_SPI_Transmit(&MCP2515_SPIHandler,Instruction,3);
 85c:	43 e0       	ldi	r20, 0x03	; 3
 85e:	50 e0       	ldi	r21, 0x00	; 0
 860:	be 01       	movw	r22, r28
 862:	6f 5f       	subi	r22, 0xFF	; 255
 864:	7f 4f       	sbci	r23, 0xFF	; 255
 866:	85 e6       	ldi	r24, 0x65	; 101
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	0e 94 18 01 	call	0x230	; 0x230 <HAL_SPI_Transmit>

}/* END_FUN MCP2515_Enable_Interrupt() */
 86e:	0f 90       	pop	r0
 870:	0f 90       	pop	r0
 872:	0f 90       	pop	r0
 874:	df 91       	pop	r29
 876:	cf 91       	pop	r28
 878:	08 95       	ret

0000087a <MCP2515_init>:
 * param : void
 * return : void  
 */
void MCP2515_init(void)
{
	MCP2515_EXTIT.EXTI_NUM = EXTI_NUM_0 ;
 87a:	e3 e6       	ldi	r30, 0x63	; 99
 87c:	f0 e0       	ldi	r31, 0x00	; 0
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	80 83       	st	Z, r24
	MCP2515_EXTIT.EXTI_EDGE_DETECTION = EXTI_EDGE_LOW_LENEL ;
 882:	11 82       	std	Z+1, r1	; 0x01
	
	MCP2515_SPIHandler.SPI_init.Mode = SPI_MODE_MASTER ;
 884:	e5 e6       	ldi	r30, 0x65	; 101
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	80 e1       	ldi	r24, 0x10	; 16
 88a:	80 83       	st	Z, r24
	MCP2515_SPIHandler.SPI_init.CLKPrescaler = SPI_CLKPrescaler_2 ;
 88c:	84 e1       	ldi	r24, 0x14	; 20
 88e:	83 83       	std	Z+3, r24	; 0x03
	HAL_SPI_Init(&MCP2515_SPIHandler);
 890:	cf 01       	movw	r24, r30
 892:	0e 94 b6 00 	call	0x16c	; 0x16c <HAL_SPI_Init>
	MCP2515_Rest();
 896:	0e 94 cf 02 	call	0x59e	; 0x59e <MCP2515_Rest>
	MCP2515_Enable_Interrupt(0x03);
 89a:	83 e0       	ldi	r24, 0x03	; 3
 89c:	0e 94 23 04 	call	0x846	; 0x846 <MCP2515_Enable_Interrupt>
	MCP2515_Set_OperMode(CONFIGURATION_MODE);
 8a0:	80 e8       	ldi	r24, 0x80	; 128
 8a2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <MCP2515_Set_OperMode>
	MCP2515_SetBitTiming(0x03,0xFA,0x87);
 8a6:	47 e8       	ldi	r20, 0x87	; 135
 8a8:	6a ef       	ldi	r22, 0xFA	; 250
 8aa:	83 e0       	ldi	r24, 0x03	; 3
 8ac:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <MCP2515_SetBitTiming>
	MCP2515_SetFilter((uint8_t)0,(uint8_t)0x0,(uint8_t)0x123);
 8b0:	21 e0       	ldi	r18, 0x01	; 1
 8b2:	40 e0       	ldi	r20, 0x00	; 0
 8b4:	50 e0       	ldi	r21, 0x00	; 0
 8b6:	ba 01       	movw	r22, r20
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	0e 94 91 03 	call	0x722	; 0x722 <MCP2515_SetFilter>
	MCP2515_SetMask((uint8_t)0,(uint8_t)0x00,(uint8_t)0xff);
 8be:	21 e0       	ldi	r18, 0x01	; 1
 8c0:	40 e0       	ldi	r20, 0x00	; 0
 8c2:	50 e0       	ldi	r21, 0x00	; 0
 8c4:	ba 01       	movw	r22, r20
 8c6:	80 e0       	ldi	r24, 0x00	; 0
 8c8:	0e 94 19 03 	call	0x632	; 0x632 <MCP2515_SetMask>
	MCP2515_Write_Register(TXRTSCTRL,0x07);
 8cc:	67 e0       	ldi	r22, 0x07	; 7
 8ce:	8d e0       	ldi	r24, 0x0D	; 13
 8d0:	0e 94 b6 02 	call	0x56c	; 0x56c <MCP2515_Write_Register>
	MCP2515_Set_OperMode(NORMAL_MODE);
 8d4:	80 e0       	ldi	r24, 0x00	; 0
 8d6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <MCP2515_Set_OperMode>
	EXTI_Init(&MCP2515_EXTIT);
 8da:	83 e6       	ldi	r24, 0x63	; 99
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	0e 94 49 00 	call	0x92	; 0x92 <EXTI_Init>
 8e2:	08 95       	ret

000008e4 <MCP2515_SendCANmsg>:
 * param : TransMesg struct hold all CAN message configuration 
 * return : void
 *  
 */
PUBLIC void MCP2515_SendCANmsg(CANMesg_t * TransMesg,uint8_t TXnum)
{
 8e4:	ef 92       	push	r14
 8e6:	ff 92       	push	r15
 8e8:	0f 93       	push	r16
 8ea:	1f 93       	push	r17
 8ec:	cf 93       	push	r28
 8ee:	df 93       	push	r29
 8f0:	cd b7       	in	r28, 0x3d	; 61
 8f2:	de b7       	in	r29, 0x3e	; 62
 8f4:	29 97       	sbiw	r28, 0x09	; 9
 8f6:	0f b6       	in	r0, 0x3f	; 63
 8f8:	f8 94       	cli
 8fa:	de bf       	out	0x3e, r29	; 62
 8fc:	0f be       	out	0x3f, r0	; 63
 8fe:	cd bf       	out	0x3d, r28	; 61
 900:	8c 01       	movw	r16, r24
 902:	f6 2e       	mov	r15, r22
	uint8_t dataTx[9] ;
	unsigned char iteration =0;

	if(TransMesg->CANControl.EXT_Field)
 904:	fc 01       	movw	r30, r24
 906:	84 81       	ldd	r24, Z+4	; 0x04
 908:	84 ff       	sbrs	r24, 4
 90a:	59 c0       	rjmp	.+178    	; 0x9be <MCP2515_SendCANmsg+0xda>
	{
		MCP2515_Write_Register(TXBnSIDH(TXnum),(unsigned char)(TransMesg->ID>>3));
 90c:	80 81       	ld	r24, Z
 90e:	91 81       	ldd	r25, Z+1	; 0x01
 910:	a2 81       	ldd	r26, Z+2	; 0x02
 912:	b3 81       	ldd	r27, Z+3	; 0x03
 914:	bc 01       	movw	r22, r24
 916:	cd 01       	movw	r24, r26
 918:	68 94       	set
 91a:	12 f8       	bld	r1, 2
 91c:	96 95       	lsr	r25
 91e:	87 95       	ror	r24
 920:	77 95       	ror	r23
 922:	67 95       	ror	r22
 924:	16 94       	lsr	r1
 926:	d1 f7       	brne	.-12     	; 0x91c <MCP2515_SendCANmsg+0x38>
 928:	ef 2c       	mov	r14, r15
 92a:	ee 0c       	add	r14, r14
 92c:	ee 0c       	add	r14, r14
 92e:	ee 0c       	add	r14, r14
 930:	ee 0c       	add	r14, r14
 932:	81 e3       	ldi	r24, 0x31	; 49
 934:	8e 0d       	add	r24, r14
 936:	0e 94 b6 02 	call	0x56c	; 0x56c <MCP2515_Write_Register>
		MCP2515_Write_Register((TXBnSIDL(TXnum)),(unsigned char)(TransMesg->ID<<5)
 93a:	f8 01       	movw	r30, r16
 93c:	80 81       	ld	r24, Z
 93e:	91 81       	ldd	r25, Z+1	; 0x01
 940:	a2 81       	ldd	r26, Z+2	; 0x02
 942:	b3 81       	ldd	r27, Z+3	; 0x03
 944:	68 2f       	mov	r22, r24
 946:	62 95       	swap	r22
 948:	66 0f       	add	r22, r22
 94a:	60 7e       	andi	r22, 0xE0	; 224
		|(1<<EXIDE)|(unsigned char)(TransMesg->ID>>27));
 94c:	07 2e       	mov	r0, r23
 94e:	7b e1       	ldi	r23, 0x1B	; 27
 950:	b6 95       	lsr	r27
 952:	a7 95       	ror	r26
 954:	97 95       	ror	r25
 956:	87 95       	ror	r24
 958:	7a 95       	dec	r23
 95a:	d1 f7       	brne	.-12     	; 0x950 <MCP2515_SendCANmsg+0x6c>
 95c:	70 2d       	mov	r23, r0
	unsigned char iteration =0;

	if(TransMesg->CANControl.EXT_Field)
	{
		MCP2515_Write_Register(TXBnSIDH(TXnum),(unsigned char)(TransMesg->ID>>3));
		MCP2515_Write_Register((TXBnSIDL(TXnum)),(unsigned char)(TransMesg->ID<<5)
 95e:	86 2b       	or	r24, r22
 960:	68 2f       	mov	r22, r24
 962:	68 60       	ori	r22, 0x08	; 8
 964:	82 e3       	ldi	r24, 0x32	; 50
 966:	8e 0d       	add	r24, r14
 968:	0e 94 b6 02 	call	0x56c	; 0x56c <MCP2515_Write_Register>
		|(1<<EXIDE)|(unsigned char)(TransMesg->ID>>27));
		MCP2515_Write_Register(TXBnEID8(TXnum),(unsigned char)(TransMesg->ID>>19));
 96c:	f8 01       	movw	r30, r16
 96e:	80 81       	ld	r24, Z
 970:	91 81       	ldd	r25, Z+1	; 0x01
 972:	a2 81       	ldd	r26, Z+2	; 0x02
 974:	b3 81       	ldd	r27, Z+3	; 0x03
 976:	bc 01       	movw	r22, r24
 978:	cd 01       	movw	r24, r26
 97a:	05 2e       	mov	r0, r21
 97c:	53 e1       	ldi	r21, 0x13	; 19
 97e:	96 95       	lsr	r25
 980:	87 95       	ror	r24
 982:	77 95       	ror	r23
 984:	67 95       	ror	r22
 986:	5a 95       	dec	r21
 988:	d1 f7       	brne	.-12     	; 0x97e <MCP2515_SendCANmsg+0x9a>
 98a:	50 2d       	mov	r21, r0
 98c:	83 e3       	ldi	r24, 0x33	; 51
 98e:	8e 0d       	add	r24, r14
 990:	0e 94 b6 02 	call	0x56c	; 0x56c <MCP2515_Write_Register>
		MCP2515_Write_Register(TXBnEID0(TXnum),(unsigned char)(TransMesg->ID>>11));
 994:	f8 01       	movw	r30, r16
 996:	80 81       	ld	r24, Z
 998:	91 81       	ldd	r25, Z+1	; 0x01
 99a:	a2 81       	ldd	r26, Z+2	; 0x02
 99c:	b3 81       	ldd	r27, Z+3	; 0x03
 99e:	bc 01       	movw	r22, r24
 9a0:	cd 01       	movw	r24, r26
 9a2:	05 2e       	mov	r0, r21
 9a4:	5b e0       	ldi	r21, 0x0B	; 11
 9a6:	96 95       	lsr	r25
 9a8:	87 95       	ror	r24
 9aa:	77 95       	ror	r23
 9ac:	67 95       	ror	r22
 9ae:	5a 95       	dec	r21
 9b0:	d1 f7       	brne	.-12     	; 0x9a6 <MCP2515_SendCANmsg+0xc2>
 9b2:	50 2d       	mov	r21, r0
 9b4:	84 e3       	ldi	r24, 0x34	; 52
 9b6:	8e 0d       	add	r24, r14
 9b8:	0e 94 b6 02 	call	0x56c	; 0x56c <MCP2515_Write_Register>
 9bc:	21 c0       	rjmp	.+66     	; 0xa00 <MCP2515_SendCANmsg+0x11c>
	} else {
		MCP2515_Write_Register(TXBnSIDH(TXnum),(unsigned char)(TransMesg->ID>>3));
 9be:	f8 01       	movw	r30, r16
 9c0:	80 81       	ld	r24, Z
 9c2:	91 81       	ldd	r25, Z+1	; 0x01
 9c4:	a2 81       	ldd	r26, Z+2	; 0x02
 9c6:	b3 81       	ldd	r27, Z+3	; 0x03
 9c8:	bc 01       	movw	r22, r24
 9ca:	cd 01       	movw	r24, r26
 9cc:	68 94       	set
 9ce:	12 f8       	bld	r1, 2
 9d0:	96 95       	lsr	r25
 9d2:	87 95       	ror	r24
 9d4:	77 95       	ror	r23
 9d6:	67 95       	ror	r22
 9d8:	16 94       	lsr	r1
 9da:	d1 f7       	brne	.-12     	; 0x9d0 <MCP2515_SendCANmsg+0xec>
 9dc:	ef 2c       	mov	r14, r15
 9de:	ee 0c       	add	r14, r14
 9e0:	ee 0c       	add	r14, r14
 9e2:	ee 0c       	add	r14, r14
 9e4:	ee 0c       	add	r14, r14
 9e6:	81 e3       	ldi	r24, 0x31	; 49
 9e8:	8e 0d       	add	r24, r14
 9ea:	0e 94 b6 02 	call	0x56c	; 0x56c <MCP2515_Write_Register>
		MCP2515_Write_Register(TXBnSIDL(TXnum),(unsigned char)(TransMesg->ID<<5));
 9ee:	f8 01       	movw	r30, r16
 9f0:	60 81       	ld	r22, Z
 9f2:	62 95       	swap	r22
 9f4:	66 0f       	add	r22, r22
 9f6:	60 7e       	andi	r22, 0xE0	; 224
 9f8:	82 e3       	ldi	r24, 0x32	; 50
 9fa:	8e 0d       	add	r24, r14
 9fc:	0e 94 b6 02 	call	0x56c	; 0x56c <MCP2515_Write_Register>
	}
	/* Setup message length and RTR bit */
	
	if(TransMesg->CANControl.RTR_Field)
 a00:	f8 01       	movw	r30, r16
 a02:	84 81       	ldd	r24, Z+4	; 0x04
 a04:	85 ff       	sbrs	r24, 5
 a06:	08 c0       	rjmp	.+16     	; 0xa18 <MCP2515_SendCANmsg+0x134>
	{
	MCP2515_Write_Register(TXBnDLC(TXnum),(1 << RTR));	
 a08:	60 e4       	ldi	r22, 0x40	; 64
 a0a:	8f 2d       	mov	r24, r15
 a0c:	82 95       	swap	r24
 a0e:	80 7f       	andi	r24, 0xF0	; 240
 a10:	8b 5c       	subi	r24, 0xCB	; 203
 a12:	0e 94 b6 02 	call	0x56c	; 0x56c <MCP2515_Write_Register>
 a16:	2e c0       	rjmp	.+92     	; 0xa74 <MCP2515_SendCANmsg+0x190>
	}else{
		
	MCP2515_Write_Register(TXBnDLC(TXnum),(TransMesg->CANControl.LEN_Field));
 a18:	f8 01       	movw	r30, r16
 a1a:	64 81       	ldd	r22, Z+4	; 0x04
 a1c:	6f 70       	andi	r22, 0x0F	; 15
 a1e:	8f 2d       	mov	r24, r15
 a20:	82 95       	swap	r24
 a22:	80 7f       	andi	r24, 0xF0	; 240
 a24:	8b 5c       	subi	r24, 0xCB	; 203
 a26:	0e 94 b6 02 	call	0x56c	; 0x56c <MCP2515_Write_Register>
	dataTx[0] =LOADTX_INSTRUCTION|0x01u;
 a2a:	81 e4       	ldi	r24, 0x41	; 65
 a2c:	89 83       	std	Y+1, r24	; 0x01
	/* Store the message into the buffer */
	for(iteration=0; iteration< TransMesg->CANControl.LEN_Field ; iteration++)
 a2e:	40 e0       	ldi	r20, 0x00	; 0
 a30:	0f c0       	rjmp	.+30     	; 0xa50 <MCP2515_SendCANmsg+0x16c>
	dataTx[iteration+1]= TransMesg->MesgData[iteration];
 a32:	f9 01       	movw	r30, r18
 a34:	31 96       	adiw	r30, 0x01	; 1
 a36:	d8 01       	movw	r26, r16
 a38:	a2 0f       	add	r26, r18
 a3a:	b3 1f       	adc	r27, r19
 a3c:	15 96       	adiw	r26, 0x05	; 5
 a3e:	8c 91       	ld	r24, X
 a40:	21 e0       	ldi	r18, 0x01	; 1
 a42:	30 e0       	ldi	r19, 0x00	; 0
 a44:	2c 0f       	add	r18, r28
 a46:	3d 1f       	adc	r19, r29
 a48:	e2 0f       	add	r30, r18
 a4a:	f3 1f       	adc	r31, r19
 a4c:	80 83       	st	Z, r24
	}else{
		
	MCP2515_Write_Register(TXBnDLC(TXnum),(TransMesg->CANControl.LEN_Field));
	dataTx[0] =LOADTX_INSTRUCTION|0x01u;
	/* Store the message into the buffer */
	for(iteration=0; iteration< TransMesg->CANControl.LEN_Field ; iteration++)
 a4e:	4f 5f       	subi	r20, 0xFF	; 255
 a50:	24 2f       	mov	r18, r20
 a52:	30 e0       	ldi	r19, 0x00	; 0
 a54:	f8 01       	movw	r30, r16
 a56:	84 81       	ldd	r24, Z+4	; 0x04
 a58:	8f 70       	andi	r24, 0x0F	; 15
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	28 17       	cp	r18, r24
 a5e:	39 07       	cpc	r19, r25
 a60:	44 f3       	brlt	.-48     	; 0xa32 <MCP2515_SendCANmsg+0x14e>
	dataTx[iteration+1]= TransMesg->MesgData[iteration];
	HAL_SPI_Transmit(&MCP2515_SPIHandler,dataTx,9);
 a62:	49 e0       	ldi	r20, 0x09	; 9
 a64:	50 e0       	ldi	r21, 0x00	; 0
 a66:	be 01       	movw	r22, r28
 a68:	6f 5f       	subi	r22, 0xFF	; 255
 a6a:	7f 4f       	sbci	r23, 0xFF	; 255
 a6c:	85 e6       	ldi	r24, 0x65	; 101
 a6e:	90 e0       	ldi	r25, 0x00	; 0
 a70:	0e 94 18 01 	call	0x230	; 0x230 <HAL_SPI_Transmit>
	}
	/* Send request to send */
	
	dataTx[0] = 0x81+TXnum;
 a74:	81 e8       	ldi	r24, 0x81	; 129
 a76:	8f 0d       	add	r24, r15
 a78:	89 83       	std	Y+1, r24	; 0x01
	HAL_SPI_Transmit(&MCP2515_SPIHandler,dataTx,1);
 a7a:	41 e0       	ldi	r20, 0x01	; 1
 a7c:	50 e0       	ldi	r21, 0x00	; 0
 a7e:	be 01       	movw	r22, r28
 a80:	6f 5f       	subi	r22, 0xFF	; 255
 a82:	7f 4f       	sbci	r23, 0xFF	; 255
 a84:	85 e6       	ldi	r24, 0x65	; 101
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	0e 94 18 01 	call	0x230	; 0x230 <HAL_SPI_Transmit>
	
	
	
}/* END_FUN MCP2515_SendCANmsg() */
 a8c:	29 96       	adiw	r28, 0x09	; 9
 a8e:	0f b6       	in	r0, 0x3f	; 63
 a90:	f8 94       	cli
 a92:	de bf       	out	0x3e, r29	; 62
 a94:	0f be       	out	0x3f, r0	; 63
 a96:	cd bf       	out	0x3d, r28	; 61
 a98:	df 91       	pop	r29
 a9a:	cf 91       	pop	r28
 a9c:	1f 91       	pop	r17
 a9e:	0f 91       	pop	r16
 aa0:	ff 90       	pop	r15
 aa2:	ef 90       	pop	r14
 aa4:	08 95       	ret

00000aa6 <MCP2515_receiveMesg>:
 * param : RecievedMesg pointer to struct that will hold all receive message information 
 * return : bool if false means their is no pending message to read   
 */

PUBLIC bool MCP2515_receiveMesg(CANMesg_t * RecievedMesg)
{
 aa6:	8f 92       	push	r8
 aa8:	9f 92       	push	r9
 aaa:	af 92       	push	r10
 aac:	bf 92       	push	r11
 aae:	ff 92       	push	r15
 ab0:	0f 93       	push	r16
 ab2:	1f 93       	push	r17
 ab4:	cf 93       	push	r28
 ab6:	df 93       	push	r29
 ab8:	8c 01       	movw	r16, r24
	uint8_t CANReaddata =0,MAilBoxNum =0 ;
	
	CANReaddata=MCP2515_Read_Register(CANSTAT);
 aba:	8e e0       	ldi	r24, 0x0E	; 14
 abc:	0e 94 9b 02 	call	0x536	; 0x536 <MCP2515_Read_Register>
	if((CANReaddata == 0x0c))
 ac0:	8c 30       	cpi	r24, 0x0C	; 12
 ac2:	29 f0       	breq	.+10     	; 0xace <MCP2515_receiveMesg+0x28>
	{
		MAilBoxNum = 0 ;
	}
	else if((CANReaddata == 0x0e)) /* means there is message is in Mailbox1 */
 ac4:	8e 30       	cpi	r24, 0x0E	; 14
 ac6:	09 f0       	breq	.+2      	; 0xaca <MCP2515_receiveMesg+0x24>
 ac8:	6a c0       	rjmp	.+212    	; 0xb9e <MCP2515_receiveMesg+0xf8>
	{
		MAilBoxNum = 1 ;
 aca:	81 e0       	ldi	r24, 0x01	; 1
 acc:	01 c0       	rjmp	.+2      	; 0xad0 <MCP2515_receiveMesg+0x2a>
	uint8_t CANReaddata =0,MAilBoxNum =0 ;
	
	CANReaddata=MCP2515_Read_Register(CANSTAT);
	if((CANReaddata == 0x0c))
	{
		MAilBoxNum = 0 ;
 ace:	80 e0       	ldi	r24, 0x00	; 0
		MAilBoxNum = 1 ;
	}else{
		return false ;
	}
	
	CANReaddata = MCP2515_Read_Register(RXBnDLC(MAilBoxNum));
 ad0:	f8 2e       	mov	r15, r24
 ad2:	ff 0c       	add	r15, r15
 ad4:	ff 0c       	add	r15, r15
 ad6:	ff 0c       	add	r15, r15
 ad8:	ff 0c       	add	r15, r15
 ada:	85 e6       	ldi	r24, 0x65	; 101
 adc:	8f 0d       	add	r24, r15
 ade:	0e 94 9b 02 	call	0x536	; 0x536 <MCP2515_Read_Register>
	RecievedMesg->CANControl.LEN_Field = CANReaddata & 0x0f ;
 ae2:	28 2f       	mov	r18, r24
 ae4:	2f 70       	andi	r18, 0x0F	; 15
 ae6:	f8 01       	movw	r30, r16
 ae8:	94 81       	ldd	r25, Z+4	; 0x04
 aea:	39 2f       	mov	r19, r25
 aec:	30 7f       	andi	r19, 0xF0	; 240
	RecievedMesg->CANControl.RTR_Field = (CANReaddata & 0x40)>>6 ;
 aee:	80 74       	andi	r24, 0x40	; 64
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	08 2e       	mov	r0, r24
 af4:	89 2f       	mov	r24, r25
 af6:	00 0c       	add	r0, r0
 af8:	88 1f       	adc	r24, r24
 afa:	99 0b       	sbc	r25, r25
 afc:	00 0c       	add	r0, r0
 afe:	88 1f       	adc	r24, r24
 b00:	99 1f       	adc	r25, r25
 b02:	93 2f       	mov	r25, r19
 b04:	92 2b       	or	r25, r18
 b06:	80 fb       	bst	r24, 0
 b08:	95 f9       	bld	r25, 5
 b0a:	94 83       	std	Z+4, r25	; 0x04
	CANReaddata = MCP2515_Read_Register(RXBnSIDL(MAilBoxNum));
 b0c:	c2 e6       	ldi	r28, 0x62	; 98
 b0e:	cf 0d       	add	r28, r15
 b10:	8c 2f       	mov	r24, r28
 b12:	0e 94 9b 02 	call	0x536	; 0x536 <MCP2515_Read_Register>
	RecievedMesg->CANControl.EXT_Field = (CANReaddata & 0x08 )>>3 ;
 b16:	88 70       	andi	r24, 0x08	; 8
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	95 95       	asr	r25
 b1c:	87 95       	ror	r24
 b1e:	95 95       	asr	r25
 b20:	87 95       	ror	r24
 b22:	95 95       	asr	r25
 b24:	87 95       	ror	r24
 b26:	f8 01       	movw	r30, r16
 b28:	94 81       	ldd	r25, Z+4	; 0x04
 b2a:	80 fb       	bst	r24, 0
 b2c:	94 f9       	bld	r25, 4
 b2e:	94 83       	std	Z+4, r25	; 0x04
	RecievedMesg->ID  = MCP2515_Read_Register(RXBnSIDH(MAilBoxNum));
 b30:	81 e6       	ldi	r24, 0x61	; 97
 b32:	8f 0d       	add	r24, r15
 b34:	0e 94 9b 02 	call	0x536	; 0x536 <MCP2515_Read_Register>
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	a0 e0       	ldi	r26, 0x00	; 0
 b3c:	b0 e0       	ldi	r27, 0x00	; 0
 b3e:	f8 01       	movw	r30, r16
 b40:	80 83       	st	Z, r24
 b42:	91 83       	std	Z+1, r25	; 0x01
 b44:	a2 83       	std	Z+2, r26	; 0x02
 b46:	b3 83       	std	Z+3, r27	; 0x03
	RecievedMesg->ID  = (RecievedMesg->ID<<8)|MCP2515_Read_Register(RXBnSIDL(MAilBoxNum));
 b48:	88 24       	eor	r8, r8
 b4a:	98 2e       	mov	r9, r24
 b4c:	a9 2e       	mov	r10, r25
 b4e:	ba 2e       	mov	r11, r26
 b50:	8c 2f       	mov	r24, r28
 b52:	0e 94 9b 02 	call	0x536	; 0x536 <MCP2515_Read_Register>
 b56:	a5 01       	movw	r20, r10
 b58:	94 01       	movw	r18, r8
 b5a:	28 2b       	or	r18, r24
 b5c:	da 01       	movw	r26, r20
 b5e:	c9 01       	movw	r24, r18
 b60:	f8 01       	movw	r30, r16
 b62:	80 83       	st	Z, r24
 b64:	91 83       	std	Z+1, r25	; 0x01
 b66:	a2 83       	std	Z+2, r26	; 0x02
 b68:	b3 83       	std	Z+3, r27	; 0x03
	for (int iterator =0 ;iterator> RecievedMesg->CANControl.LEN_Field  ;iterator++)
 b6a:	c0 e0       	ldi	r28, 0x00	; 0
 b6c:	d0 e0       	ldi	r29, 0x00	; 0
 b6e:	0a c0       	rjmp	.+20     	; 0xb84 <MCP2515_receiveMesg+0xde>
	{
		RecievedMesg->MesgData[iterator] = MCP2515_Read_Register(RXBnDm(MAilBoxNum,iterator));
 b70:	8c 2f       	mov	r24, r28
 b72:	8f 0d       	add	r24, r15
 b74:	8a 59       	subi	r24, 0x9A	; 154
 b76:	0e 94 9b 02 	call	0x536	; 0x536 <MCP2515_Read_Register>
 b7a:	f8 01       	movw	r30, r16
 b7c:	ec 0f       	add	r30, r28
 b7e:	fd 1f       	adc	r31, r29
 b80:	85 83       	std	Z+5, r24	; 0x05
	RecievedMesg->CANControl.RTR_Field = (CANReaddata & 0x40)>>6 ;
	CANReaddata = MCP2515_Read_Register(RXBnSIDL(MAilBoxNum));
	RecievedMesg->CANControl.EXT_Field = (CANReaddata & 0x08 )>>3 ;
	RecievedMesg->ID  = MCP2515_Read_Register(RXBnSIDH(MAilBoxNum));
	RecievedMesg->ID  = (RecievedMesg->ID<<8)|MCP2515_Read_Register(RXBnSIDL(MAilBoxNum));
	for (int iterator =0 ;iterator> RecievedMesg->CANControl.LEN_Field  ;iterator++)
 b82:	21 96       	adiw	r28, 0x01	; 1
 b84:	f8 01       	movw	r30, r16
 b86:	84 81       	ldd	r24, Z+4	; 0x04
 b88:	8f 70       	andi	r24, 0x0F	; 15
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	8c 17       	cp	r24, r28
 b8e:	9d 07       	cpc	r25, r29
 b90:	7c f3       	brlt	.-34     	; 0xb70 <MCP2515_receiveMesg+0xca>
	{
		RecievedMesg->MesgData[iterator] = MCP2515_Read_Register(RXBnDm(MAilBoxNum,iterator));
	}
	
	MCP2515_Write_Register(CANINTF , 0x00 ); /* FIRST CLESR FLAG */
 b92:	60 e0       	ldi	r22, 0x00	; 0
 b94:	8c e2       	ldi	r24, 0x2C	; 44
 b96:	0e 94 b6 02 	call	0x56c	; 0x56c <MCP2515_Write_Register>
	return true ;
 b9a:	81 e0       	ldi	r24, 0x01	; 1
 b9c:	01 c0       	rjmp	.+2      	; 0xba0 <MCP2515_receiveMesg+0xfa>
	}
	else if((CANReaddata == 0x0e)) /* means there is message is in Mailbox1 */
	{
		MAilBoxNum = 1 ;
	}else{
		return false ;
 b9e:	80 e0       	ldi	r24, 0x00	; 0
		RecievedMesg->MesgData[iterator] = MCP2515_Read_Register(RXBnDm(MAilBoxNum,iterator));
	}
	
	MCP2515_Write_Register(CANINTF , 0x00 ); /* FIRST CLESR FLAG */
	return true ;
 ba0:	df 91       	pop	r29
 ba2:	cf 91       	pop	r28
 ba4:	1f 91       	pop	r17
 ba6:	0f 91       	pop	r16
 ba8:	ff 90       	pop	r15
 baa:	bf 90       	pop	r11
 bac:	af 90       	pop	r10
 bae:	9f 90       	pop	r9
 bb0:	8f 90       	pop	r8
 bb2:	08 95       	ret

00000bb4 <itoa>:
 bb4:	45 32       	cpi	r20, 0x25	; 37
 bb6:	51 05       	cpc	r21, r1
 bb8:	20 f4       	brcc	.+8      	; 0xbc2 <itoa+0xe>
 bba:	42 30       	cpi	r20, 0x02	; 2
 bbc:	10 f0       	brcs	.+4      	; 0xbc2 <itoa+0xe>
 bbe:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__itoa_ncheck>
 bc2:	fb 01       	movw	r30, r22
 bc4:	10 82       	st	Z, r1
 bc6:	cb 01       	movw	r24, r22
 bc8:	08 95       	ret

00000bca <__itoa_ncheck>:
 bca:	bb 27       	eor	r27, r27
 bcc:	4a 30       	cpi	r20, 0x0A	; 10
 bce:	31 f4       	brne	.+12     	; 0xbdc <__itoa_ncheck+0x12>
 bd0:	99 23       	and	r25, r25
 bd2:	22 f4       	brpl	.+8      	; 0xbdc <__itoa_ncheck+0x12>
 bd4:	bd e2       	ldi	r27, 0x2D	; 45
 bd6:	90 95       	com	r25
 bd8:	81 95       	neg	r24
 bda:	9f 4f       	sbci	r25, 0xFF	; 255
 bdc:	0c 94 f1 05 	jmp	0xbe2	; 0xbe2 <__utoa_common>

00000be0 <__utoa_ncheck>:
 be0:	bb 27       	eor	r27, r27

00000be2 <__utoa_common>:
 be2:	fb 01       	movw	r30, r22
 be4:	55 27       	eor	r21, r21
 be6:	aa 27       	eor	r26, r26
 be8:	88 0f       	add	r24, r24
 bea:	99 1f       	adc	r25, r25
 bec:	aa 1f       	adc	r26, r26
 bee:	a4 17       	cp	r26, r20
 bf0:	10 f0       	brcs	.+4      	; 0xbf6 <__utoa_common+0x14>
 bf2:	a4 1b       	sub	r26, r20
 bf4:	83 95       	inc	r24
 bf6:	50 51       	subi	r21, 0x10	; 16
 bf8:	b9 f7       	brne	.-18     	; 0xbe8 <__utoa_common+0x6>
 bfa:	a0 5d       	subi	r26, 0xD0	; 208
 bfc:	aa 33       	cpi	r26, 0x3A	; 58
 bfe:	08 f0       	brcs	.+2      	; 0xc02 <__utoa_common+0x20>
 c00:	a9 5d       	subi	r26, 0xD9	; 217
 c02:	a1 93       	st	Z+, r26
 c04:	00 97       	sbiw	r24, 0x00	; 0
 c06:	79 f7       	brne	.-34     	; 0xbe6 <__utoa_common+0x4>
 c08:	b1 11       	cpse	r27, r1
 c0a:	b1 93       	st	Z+, r27
 c0c:	11 92       	st	Z+, r1
 c0e:	cb 01       	movw	r24, r22
 c10:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <strrev>

00000c14 <strrev>:
 c14:	dc 01       	movw	r26, r24
 c16:	fc 01       	movw	r30, r24
 c18:	67 2f       	mov	r22, r23
 c1a:	71 91       	ld	r23, Z+
 c1c:	77 23       	and	r23, r23
 c1e:	e1 f7       	brne	.-8      	; 0xc18 <strrev+0x4>
 c20:	32 97       	sbiw	r30, 0x02	; 2
 c22:	04 c0       	rjmp	.+8      	; 0xc2c <strrev+0x18>
 c24:	7c 91       	ld	r23, X
 c26:	6d 93       	st	X+, r22
 c28:	70 83       	st	Z, r23
 c2a:	62 91       	ld	r22, -Z
 c2c:	ae 17       	cp	r26, r30
 c2e:	bf 07       	cpc	r27, r31
 c30:	c8 f3       	brcs	.-14     	; 0xc24 <strrev+0x10>
 c32:	08 95       	ret

00000c34 <_exit>:
 c34:	f8 94       	cli

00000c36 <__stop_program>:
 c36:	ff cf       	rjmp	.-2      	; 0xc36 <__stop_program>
