
MCP2515.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c42  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00007c42  00000cd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  00800092  00800092  00000d08  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  00000d78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d77  00000000  00000000  00001018  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e92  00000000  00000000  00003d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001704  00000000  00000000  00004c21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000678  00000000  00000000  00006328  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c60  00000000  00000000  000069a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b8a  00000000  00000000  00007600  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  0000918a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	0c 94 2a 38 	jmp	0x7054	; 0x7054 <__ctors_end>
    7004:	0c 94 7f 3b 	jmp	0x76fe	; 0x76fe <__vector_1>
    7008:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    700c:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7010:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7014:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7018:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    701c:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7020:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7024:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7028:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    702c:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7030:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7034:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7038:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    703c:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7040:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7044:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7048:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    704c:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7050:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>

00007054 <__ctors_end>:
    7054:	11 24       	eor	r1, r1
    7056:	1f be       	out	0x3f, r1	; 63
    7058:	cf e5       	ldi	r28, 0x5F	; 95
    705a:	d8 e0       	ldi	r29, 0x08	; 8
    705c:	de bf       	out	0x3e, r29	; 62
    705e:	cd bf       	out	0x3d, r28	; 61

00007060 <__do_copy_data>:
    7060:	10 e0       	ldi	r17, 0x00	; 0
    7062:	a0 e6       	ldi	r26, 0x60	; 96
    7064:	b0 e0       	ldi	r27, 0x00	; 0
    7066:	e2 e4       	ldi	r30, 0x42	; 66
    7068:	fc e7       	ldi	r31, 0x7C	; 124
    706a:	02 c0       	rjmp	.+4      	; 0x7070 <__do_copy_data+0x10>
    706c:	05 90       	lpm	r0, Z+
    706e:	0d 92       	st	X+, r0
    7070:	a2 39       	cpi	r26, 0x92	; 146
    7072:	b1 07       	cpc	r27, r17
    7074:	d9 f7       	brne	.-10     	; 0x706c <__do_copy_data+0xc>

00007076 <__do_clear_bss>:
    7076:	20 e0       	ldi	r18, 0x00	; 0
    7078:	a2 e9       	ldi	r26, 0x92	; 146
    707a:	b0 e0       	ldi	r27, 0x00	; 0
    707c:	01 c0       	rjmp	.+2      	; 0x7080 <.do_clear_bss_start>

0000707e <.do_clear_bss_loop>:
    707e:	1d 92       	st	X+, r1

00007080 <.do_clear_bss_start>:
    7080:	ae 3b       	cpi	r26, 0xBE	; 190
    7082:	b2 07       	cpc	r27, r18
    7084:	e1 f7       	brne	.-8      	; 0x707e <.do_clear_bss_loop>
    7086:	0e 94 14 3b 	call	0x7628	; 0x7628 <main>
    708a:	0c 94 1f 3e 	jmp	0x7c3e	; 0x7c3e <_exit>

0000708e <__bad_interrupt>:
    708e:	0c 94 00 38 	jmp	0x7000	; 0x7000 <__vectors>

00007092 <Validit_CheckSum>:
 * brief : this function used to validity of received checksum
 * param :  LineParsing pointer to struct that hold the parsing information about specific line
 * return true or false 
 */ 
PUPLIC bool Validit_CheckSum( HEXImageLine_t * LineParsing)
{
    7092:	0f 93       	push	r16
    7094:	1f 93       	push	r17
    7096:	cf 93       	push	r28
    7098:	df 93       	push	r29
    709a:	8c 01       	movw	r16, r24
	
	uint8_t CalCulCheckSum =0 , iterat = 0 ;
	
	for(iterat = 0   ; iterat<LineParsing->DataSize+4 ; iterat++)
    709c:	c0 e0       	ldi	r28, 0x00	; 0
 * return true or false 
 */ 
PUPLIC bool Validit_CheckSum( HEXImageLine_t * LineParsing)
{
	
	uint8_t CalCulCheckSum =0 , iterat = 0 ;
    709e:	d0 e0       	ldi	r29, 0x00	; 0
	
	for(iterat = 0   ; iterat<LineParsing->DataSize+4 ; iterat++)
    70a0:	0a c0       	rjmp	.+20     	; 0x70b6 <Validit_CheckSum+0x24>
	{
		eeprom_busy_wait();
    70a2:	e1 99       	sbic	0x1c, 1	; 28
    70a4:	fe cf       	rjmp	.-4      	; 0x70a2 <Validit_CheckSum+0x10>
		CalCulCheckSum += eeprom_read_byte((uint8_t*)((LineParsing->LineStartAddr) + iterat));
    70a6:	f8 01       	movw	r30, r16
    70a8:	20 81       	ld	r18, Z
    70aa:	82 0f       	add	r24, r18
    70ac:	91 1d       	adc	r25, r1
    70ae:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <eeprom_read_byte>
    70b2:	d8 0f       	add	r29, r24
PUPLIC bool Validit_CheckSum( HEXImageLine_t * LineParsing)
{
	
	uint8_t CalCulCheckSum =0 , iterat = 0 ;
	
	for(iterat = 0   ; iterat<LineParsing->DataSize+4 ; iterat++)
    70b4:	cf 5f       	subi	r28, 0xFF	; 255
    70b6:	8c 2f       	mov	r24, r28
    70b8:	90 e0       	ldi	r25, 0x00	; 0
    70ba:	f8 01       	movw	r30, r16
    70bc:	22 81       	ldd	r18, Z+2	; 0x02
    70be:	30 e0       	ldi	r19, 0x00	; 0
    70c0:	2c 5f       	subi	r18, 0xFC	; 252
    70c2:	3f 4f       	sbci	r19, 0xFF	; 255
    70c4:	82 17       	cp	r24, r18
    70c6:	93 07       	cpc	r25, r19
    70c8:	64 f3       	brlt	.-40     	; 0x70a2 <Validit_CheckSum+0x10>
	{
		eeprom_busy_wait();
		CalCulCheckSum += eeprom_read_byte((uint8_t*)((LineParsing->LineStartAddr) + iterat));
	}
	
	if	(((~CalCulCheckSum) +1)== LineParsing->ReceivedCheckSum)
    70ca:	8d 2f       	mov	r24, r29
    70cc:	90 e0       	ldi	r25, 0x00	; 0
    70ce:	91 95       	neg	r25
    70d0:	81 95       	neg	r24
    70d2:	91 09       	sbc	r25, r1
    70d4:	23 81       	ldd	r18, Z+3	; 0x03
    70d6:	30 e0       	ldi	r19, 0x00	; 0
    70d8:	82 17       	cp	r24, r18
    70da:	93 07       	cpc	r25, r19
    70dc:	11 f4       	brne	.+4      	; 0x70e2 <Validit_CheckSum+0x50>
	return true ;
    70de:	81 e0       	ldi	r24, 0x01	; 1
    70e0:	01 c0       	rjmp	.+2      	; 0x70e4 <Validit_CheckSum+0x52>
	else
	return false ;
    70e2:	80 e0       	ldi	r24, 0x00	; 0
	
	
	
}/* END_FUN Validit_CheckSum() */
    70e4:	df 91       	pop	r29
    70e6:	cf 91       	pop	r28
    70e8:	1f 91       	pop	r17
    70ea:	0f 91       	pop	r16
    70ec:	08 95       	ret

000070ee <Parse_Image>:
 * param :  LineStartAddr location of the first byte in the ImageLine 
 * param :  LineParsing pointer to struct that hold the parsing information about specific line 
 * return true or false 
 */ 
PUPLIC bool Parse_Image(uint8_t LineStartAddr , HEXImageLine_t * LineParsing)
{
    70ee:	ef 92       	push	r14
    70f0:	ff 92       	push	r15
    70f2:	0f 93       	push	r16
    70f4:	1f 93       	push	r17
    70f6:	cf 93       	push	r28
    70f8:	c8 2f       	mov	r28, r24
    70fa:	8b 01       	movw	r16, r22

	LineParsing->LineType = eeprom_read_byte((uint8_t*)(LineStartAddr+3));
    70fc:	e8 2e       	mov	r14, r24
    70fe:	f1 2c       	mov	r15, r1
    7100:	c7 01       	movw	r24, r14
    7102:	03 96       	adiw	r24, 0x03	; 3
    7104:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <eeprom_read_byte>
    7108:	f8 01       	movw	r30, r16
    710a:	84 83       	std	Z+4, r24	; 0x04
	LineParsing->LineStartAddr = LineStartAddr ;
    710c:	c0 83       	st	Z, r28
	if (LineParsing->LineType == HEX_LINE_DATA_RECORD)  /* data line */ 
    710e:	81 11       	cpse	r24, r1
    7110:	12 c0       	rjmp	.+36     	; 0x7136 <Parse_Image+0x48>
	{
		LineParsing->DataSize = eeprom_read_byte((uint8_t*)LineStartAddr);
    7112:	c7 01       	movw	r24, r14
    7114:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <eeprom_read_byte>
    7118:	f8 01       	movw	r30, r16
    711a:	82 83       	std	Z+2, r24	; 0x02
		LineParsing->NextLineStartAddr = LineStartAddr + LineParsing->DataSize + 5 ;
    711c:	c8 0f       	add	r28, r24
    711e:	cb 5f       	subi	r28, 0xFB	; 251
    7120:	c1 83       	std	Z+1, r28	; 0x01
		LineParsing->ReceivedCheckSum = eeprom_read_byte((uint8_t*)(LineStartAddr + LineParsing->DataSize + 4));
    7122:	97 01       	movw	r18, r14
    7124:	28 0f       	add	r18, r24
    7126:	31 1d       	adc	r19, r1
    7128:	c9 01       	movw	r24, r18
    712a:	04 96       	adiw	r24, 0x04	; 4
    712c:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <eeprom_read_byte>
    7130:	f8 01       	movw	r30, r16
    7132:	83 83       	std	Z+3, r24	; 0x03
    7134:	05 c0       	rjmp	.+10     	; 0x7140 <Parse_Image+0x52>
		
	}
	else if(LineParsing->LineType  == HEX_LINE_END_FILE)
    7136:	81 30       	cpi	r24, 0x01	; 1
    7138:	19 f4       	brne	.+6      	; 0x7140 <Parse_Image+0x52>
	{
		LineParsing->DataSize = 0 ;
    713a:	f8 01       	movw	r30, r16
    713c:	12 82       	std	Z+2, r1	; 0x02
		return true ;
    713e:	03 c0       	rjmp	.+6      	; 0x7146 <Parse_Image+0x58>

	}
	
	return Validit_CheckSum(LineParsing);
    7140:	c8 01       	movw	r24, r16
    7142:	0e 94 49 38 	call	0x7092	; 0x7092 <Validit_CheckSum>
	
	
	

}/* END_FUN Parse_Image() */
    7146:	cf 91       	pop	r28
    7148:	1f 91       	pop	r17
    714a:	0f 91       	pop	r16
    714c:	ff 90       	pop	r15
    714e:	ef 90       	pop	r14
    7150:	08 95       	ret

00007152 <StoreHexImageInFlashImage>:
 *
 * param :  LineParsing pointer to struct that hold the parsing information about specific line 
 * return true or false 
 */ 
 PUPLIC bool StoreHexImageInFlashImage( HEXImageLine_t * LineParsing)
{
    7152:	9f 92       	push	r9
    7154:	af 92       	push	r10
    7156:	bf 92       	push	r11
    7158:	cf 92       	push	r12
    715a:	df 92       	push	r13
    715c:	ef 92       	push	r14
    715e:	ff 92       	push	r15
    7160:	0f 93       	push	r16
    7162:	1f 93       	push	r17
    7164:	cf 93       	push	r28
    7166:	df 93       	push	r29
    7168:	7c 01       	movw	r14, r24
	uint16_t Avr_Word = 0 ,Status =0  ;
    716a:	c1 2c       	mov	r12, r1
    716c:	d1 2c       	mov	r13, r1
	while(1)
	{

		eeprom_busy_wait ();
    716e:	e1 99       	sbic	0x1c, 1	; 28
    7170:	fe cf       	rjmp	.-4      	; 0x716e <StoreHexImageInFlashImage+0x1c>
		boot_page_erase_safe (PageNum * SPM_PAGESIZE);
    7172:	07 b6       	in	r0, 0x37	; 55
    7174:	00 fc       	sbrc	r0, 0
    7176:	fd cf       	rjmp	.-6      	; 0x7172 <StoreHexImageInFlashImage+0x20>
    7178:	e1 99       	sbic	0x1c, 1	; 28
    717a:	fe cf       	rjmp	.-4      	; 0x7178 <StoreHexImageInFlashImage+0x26>
    717c:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <__data_end>
    7180:	20 e8       	ldi	r18, 0x80	; 128
    7182:	e2 9f       	mul	r30, r18
    7184:	f0 01       	movw	r30, r0
    7186:	11 24       	eor	r1, r1
    7188:	83 e0       	ldi	r24, 0x03	; 3
    718a:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    718e:	e8 95       	spm
		boot_spm_busy_wait ();      /* Wait until the memory is erased */
    7190:	07 b6       	in	r0, 0x37	; 55
    7192:	00 fc       	sbrc	r0, 0
    7194:	fd cf       	rjmp	.-6      	; 0x7190 <StoreHexImageInFlashImage+0x3e>
    7196:	a1 2c       	mov	r10, r1
    7198:	39 c0       	rjmp	.+114    	; 0x720c <StoreHexImageInFlashImage+0xba>
		for (uint8_t iterat =0 ;iterat < SPM_PAGESIZE ;)
		{
			Status = Parse_Image(LineParsing->NextLineStartAddr,LineParsing) ;
    719a:	b7 01       	movw	r22, r14
    719c:	f7 01       	movw	r30, r14
    719e:	81 81       	ldd	r24, Z+1	; 0x01
    71a0:	0e 94 77 38 	call	0x70ee	; 0x70ee <Parse_Image>
    71a4:	c8 2e       	mov	r12, r24
    71a6:	d1 2c       	mov	r13, r1
			if(LineParsing->DataSize == 0 )  break;
    71a8:	f7 01       	movw	r30, r14
    71aa:	92 80       	ldd	r9, Z+2	; 0x02
    71ac:	99 20       	and	r9, r9
    71ae:	89 f1       	breq	.+98     	; 0x7212 <StoreHexImageInFlashImage+0xc0>
    71b0:	bb 24       	eor	r11, r11
    71b2:	b3 94       	inc	r11
    71b4:	29 c0       	rjmp	.+82     	; 0x7208 <StoreHexImageInFlashImage+0xb6>
					
			for (uint8_t DataSize = 1 ;DataSize < LineParsing->DataSize ;   )
			{
				Avr_Word = eeprom_read_byte((uint8_t*)(LineParsing->LineStartAddr+3+DataSize++));
    71b6:	f7 01       	movw	r30, r14
    71b8:	c0 81       	ld	r28, Z
    71ba:	d0 e0       	ldi	r29, 0x00	; 0
    71bc:	23 96       	adiw	r28, 0x03	; 3
    71be:	ce 01       	movw	r24, r28
    71c0:	8b 0d       	add	r24, r11
    71c2:	91 1d       	adc	r25, r1
    71c4:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <eeprom_read_byte>
    71c8:	08 2f       	mov	r16, r24
    71ca:	10 e0       	ldi	r17, 0x00	; 0
				Avr_Word |= eeprom_read_byte((uint8_t*)(LineParsing->LineStartAddr+3+DataSize++)) << 8;
    71cc:	81 e0       	ldi	r24, 0x01	; 1
    71ce:	8b 0d       	add	r24, r11
    71d0:	9e 01       	movw	r18, r28
    71d2:	28 0f       	add	r18, r24
    71d4:	31 1d       	adc	r19, r1
    71d6:	c9 01       	movw	r24, r18
    71d8:	b3 94       	inc	r11
    71da:	b3 94       	inc	r11
    71dc:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <eeprom_read_byte>
    71e0:	90 e0       	ldi	r25, 0x00	; 0
    71e2:	98 2f       	mov	r25, r24
    71e4:	88 27       	eor	r24, r24
    71e6:	80 2b       	or	r24, r16
    71e8:	91 2b       	or	r25, r17

				boot_page_fill_safe (iterat, Avr_Word); /* write to the temp flash buffer */
    71ea:	07 b6       	in	r0, 0x37	; 55
    71ec:	00 fc       	sbrc	r0, 0
    71ee:	fd cf       	rjmp	.-6      	; 0x71ea <StoreHexImageInFlashImage+0x98>
    71f0:	e1 99       	sbic	0x1c, 1	; 28
    71f2:	fe cf       	rjmp	.-4      	; 0x71f0 <StoreHexImageInFlashImage+0x9e>
    71f4:	ea 2d       	mov	r30, r10
    71f6:	f0 e0       	ldi	r31, 0x00	; 0
    71f8:	21 e0       	ldi	r18, 0x01	; 1
    71fa:	0c 01       	movw	r0, r24
    71fc:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    7200:	e8 95       	spm
    7202:	11 24       	eor	r1, r1
								iterat +=2;
    7204:	a3 94       	inc	r10
    7206:	a3 94       	inc	r10
		for (uint8_t iterat =0 ;iterat < SPM_PAGESIZE ;)
		{
			Status = Parse_Image(LineParsing->NextLineStartAddr,LineParsing) ;
			if(LineParsing->DataSize == 0 )  break;
					
			for (uint8_t DataSize = 1 ;DataSize < LineParsing->DataSize ;   )
    7208:	b9 14       	cp	r11, r9
    720a:	a8 f2       	brcs	.-86     	; 0x71b6 <StoreHexImageInFlashImage+0x64>
	{

		eeprom_busy_wait ();
		boot_page_erase_safe (PageNum * SPM_PAGESIZE);
		boot_spm_busy_wait ();      /* Wait until the memory is erased */
		for (uint8_t iterat =0 ;iterat < SPM_PAGESIZE ;)
    720c:	aa 20       	and	r10, r10
    720e:	0c f0       	brlt	.+2      	; 0x7212 <StoreHexImageInFlashImage+0xc0>
    7210:	c4 cf       	rjmp	.-120    	; 0x719a <StoreHexImageInFlashImage+0x48>

			
			
		}

		boot_page_write_safe (PageNum * SPM_PAGESIZE);     /* Store temp flash buffer in flash page */
    7212:	07 b6       	in	r0, 0x37	; 55
    7214:	00 fc       	sbrc	r0, 0
    7216:	fd cf       	rjmp	.-6      	; 0x7212 <StoreHexImageInFlashImage+0xc0>
    7218:	e1 99       	sbic	0x1c, 1	; 28
    721a:	fe cf       	rjmp	.-4      	; 0x7218 <StoreHexImageInFlashImage+0xc6>
    721c:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
    7220:	30 e8       	ldi	r19, 0x80	; 128
    7222:	83 9f       	mul	r24, r19
    7224:	f0 01       	movw	r30, r0
    7226:	11 24       	eor	r1, r1
    7228:	95 e0       	ldi	r25, 0x05	; 5
    722a:	90 93 57 00 	sts	0x0057, r25	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    722e:	e8 95       	spm
		boot_spm_busy_wait();							 /* Wait until write operation is ended */
    7230:	07 b6       	in	r0, 0x37	; 55
    7232:	00 fc       	sbrc	r0, 0
    7234:	fd cf       	rjmp	.-6      	; 0x7230 <StoreHexImageInFlashImage+0xde>
		boot_rww_enable ();		
    7236:	91 e1       	ldi	r25, 0x11	; 17
    7238:	90 93 57 00 	sts	0x0057, r25	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    723c:	e8 95       	spm
		if(LineParsing->DataSize == 0 ) break;	
    723e:	f7 01       	movw	r30, r14
    7240:	92 81       	ldd	r25, Z+2	; 0x02
    7242:	99 23       	and	r25, r25
    7244:	21 f0       	breq	.+8      	; 0x724e <StoreHexImageInFlashImage+0xfc>

	
		PageNum++; 
    7246:	8f 5f       	subi	r24, 0xFF	; 255
    7248:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>

	}
    724c:	90 cf       	rjmp	.-224    	; 0x716e <StoreHexImageInFlashImage+0x1c>
	
	if ((Status == true))
    724e:	ca 94       	dec	r12
    7250:	cd 28       	or	r12, r13
    7252:	11 f4       	brne	.+4      	; 0x7258 <StoreHexImageInFlashImage+0x106>
	{
		return true ;
    7254:	81 e0       	ldi	r24, 0x01	; 1
    7256:	01 c0       	rjmp	.+2      	; 0x725a <StoreHexImageInFlashImage+0x108>
	}else{
		return false;
    7258:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	
	
	
    725a:	df 91       	pop	r29
    725c:	cf 91       	pop	r28
    725e:	1f 91       	pop	r17
    7260:	0f 91       	pop	r16
    7262:	ff 90       	pop	r15
    7264:	ef 90       	pop	r14
    7266:	df 90       	pop	r13
    7268:	cf 90       	pop	r12
    726a:	bf 90       	pop	r11
    726c:	af 90       	pop	r10
    726e:	9f 90       	pop	r9
    7270:	08 95       	ret

00007272 <EXTI_Init>:
 * brief this function used to enable and configure the selected INIT 
 * param : Handler is pointer to struct hold all INIT configurations 
 * return : void 
 */
void EXTI_Init(EXIT_Handler_t * Handler)
{
    7272:	fc 01       	movw	r30, r24
	
	if(Handler->EXTI_NUM == EXTI_NUM_2) /* INIT2 only available for edge detection */
    7274:	80 81       	ld	r24, Z
    7276:	81 11       	cpse	r24, r1
    7278:	0b c0       	rjmp	.+22     	; 0x7290 <EXTI_Init+0x1e>
	{
		if(Handler->EXTI_EDGE_DETECTION == EXTI_EDGE_FAILING_EDGE)
    727a:	81 81       	ldd	r24, Z+1	; 0x01
    727c:	82 30       	cpi	r24, 0x02	; 2
    727e:	21 f4       	brne	.+8      	; 0x7288 <EXTI_Init+0x16>
			MCUCSR &=~(1<<ISC2);
    7280:	84 b7       	in	r24, 0x34	; 52
    7282:	8f 7b       	andi	r24, 0xBF	; 191
    7284:	84 bf       	out	0x34, r24	; 52
    7286:	1d c0       	rjmp	.+58     	; 0x72c2 <EXTI_Init+0x50>
		else
			MCUCSR |= (1<<ISC2);
    7288:	84 b7       	in	r24, 0x34	; 52
    728a:	80 64       	ori	r24, 0x40	; 64
    728c:	84 bf       	out	0x34, r24	; 52
    728e:	19 c0       	rjmp	.+50     	; 0x72c2 <EXTI_Init+0x50>
		
	}else{   /* set configurations for INIT1 or INIT2  */
		
		MCUCR &=~(0x0f);
    7290:	85 b7       	in	r24, 0x35	; 53
    7292:	80 7f       	andi	r24, 0xF0	; 240
    7294:	85 bf       	out	0x35, r24	; 53
		if(Handler->EXTI_NUM == EXTI_NUM_0)
    7296:	20 81       	ld	r18, Z
    7298:	21 30       	cpi	r18, 0x01	; 1
    729a:	29 f4       	brne	.+10     	; 0x72a6 <EXTI_Init+0x34>
		{
		MCUCR |= Handler->EXTI_EDGE_DETECTION;
    729c:	95 b7       	in	r25, 0x35	; 53
    729e:	81 81       	ldd	r24, Z+1	; 0x01
    72a0:	89 2b       	or	r24, r25
    72a2:	85 bf       	out	0x35, r24	; 53
    72a4:	0e c0       	rjmp	.+28     	; 0x72c2 <EXTI_Init+0x50>
		}
		else
		{
		MCUCR |= (Handler->EXTI_EDGE_DETECTION<<(2*Handler->EXTI_NUM));
    72a6:	45 b7       	in	r20, 0x35	; 53
    72a8:	91 81       	ldd	r25, Z+1	; 0x01
    72aa:	30 e0       	ldi	r19, 0x00	; 0
    72ac:	22 0f       	add	r18, r18
    72ae:	33 1f       	adc	r19, r19
    72b0:	89 2f       	mov	r24, r25
    72b2:	90 e0       	ldi	r25, 0x00	; 0
    72b4:	02 c0       	rjmp	.+4      	; 0x72ba <EXTI_Init+0x48>
    72b6:	88 0f       	add	r24, r24
    72b8:	99 1f       	adc	r25, r25
    72ba:	2a 95       	dec	r18
    72bc:	e2 f7       	brpl	.-8      	; 0x72b6 <EXTI_Init+0x44>
    72be:	84 2b       	or	r24, r20
    72c0:	85 bf       	out	0x35, r24	; 53
		}
		
	}
	
	
	GICR |= (1<<(5+Handler->EXTI_NUM));  /* enable the required INIT */
    72c2:	4b b7       	in	r20, 0x3b	; 59
    72c4:	20 81       	ld	r18, Z
    72c6:	30 e0       	ldi	r19, 0x00	; 0
    72c8:	2b 5f       	subi	r18, 0xFB	; 251
    72ca:	3f 4f       	sbci	r19, 0xFF	; 255
    72cc:	81 e0       	ldi	r24, 0x01	; 1
    72ce:	90 e0       	ldi	r25, 0x00	; 0
    72d0:	02 c0       	rjmp	.+4      	; 0x72d6 <EXTI_Init+0x64>
    72d2:	88 0f       	add	r24, r24
    72d4:	99 1f       	adc	r25, r25
    72d6:	2a 95       	dec	r18
    72d8:	e2 f7       	brpl	.-8      	; 0x72d2 <EXTI_Init+0x60>
    72da:	84 2b       	or	r24, r20
    72dc:	8b bf       	out	0x3b, r24	; 59
	
	sei();
    72de:	78 94       	sei
    72e0:	08 95       	ret

000072e2 <HAL_GPIO_INIT_PIN>:
	}
	else
	{
		return GPIO_PIN_RESET ;
	}
}
    72e2:	dc 01       	movw	r26, r24
    72e4:	fb 01       	movw	r30, r22
    72e6:	81 81       	ldd	r24, Z+1	; 0x01
    72e8:	81 30       	cpi	r24, 0x01	; 1
    72ea:	99 f4       	brne	.+38     	; 0x7312 <HAL_GPIO_INIT_PIN+0x30>
    72ec:	80 81       	ld	r24, Z
    72ee:	11 96       	adiw	r26, 0x01	; 1
    72f0:	9c 91       	ld	r25, X
    72f2:	11 97       	sbiw	r26, 0x01	; 1
    72f4:	89 2b       	or	r24, r25
    72f6:	11 96       	adiw	r26, 0x01	; 1
    72f8:	8c 93       	st	X, r24
    72fa:	11 97       	sbiw	r26, 0x01	; 1
    72fc:	82 81       	ldd	r24, Z+2	; 0x02
    72fe:	81 30       	cpi	r24, 0x01	; 1
    7300:	81 f4       	brne	.+32     	; 0x7322 <HAL_GPIO_INIT_PIN+0x40>
    7302:	80 81       	ld	r24, Z
    7304:	12 96       	adiw	r26, 0x02	; 2
    7306:	9c 91       	ld	r25, X
    7308:	12 97       	sbiw	r26, 0x02	; 2
    730a:	89 2b       	or	r24, r25
    730c:	12 96       	adiw	r26, 0x02	; 2
    730e:	8c 93       	st	X, r24
    7310:	08 95       	ret
    7312:	90 81       	ld	r25, Z
    7314:	90 95       	com	r25
    7316:	11 96       	adiw	r26, 0x01	; 1
    7318:	8c 91       	ld	r24, X
    731a:	11 97       	sbiw	r26, 0x01	; 1
    731c:	98 23       	and	r25, r24
    731e:	11 96       	adiw	r26, 0x01	; 1
    7320:	9c 93       	st	X, r25
    7322:	08 95       	ret

00007324 <HAL_GPIO_WRITEPIN>:

void HAL_GPIO_WRITEPIN(GPIO_TypeDef * PORT,uint8_t PIN_NUM,GPIO_PinState PIN_STATE)
{
	if(PIN_STATE != GPIO_PIN_RESET)
    7324:	44 23       	and	r20, r20
    7326:	29 f0       	breq	.+10     	; 0x7332 <HAL_GPIO_WRITEPIN+0xe>
	{
		PORT->PORT_REG |= PIN_NUM ;
    7328:	fc 01       	movw	r30, r24
    732a:	22 81       	ldd	r18, Z+2	; 0x02
    732c:	62 2b       	or	r22, r18
    732e:	62 83       	std	Z+2, r22	; 0x02
    7330:	08 95       	ret
	}
	else
	{
		PORT->PORT_REG &= ~(PIN_NUM);
    7332:	60 95       	com	r22
    7334:	fc 01       	movw	r30, r24
    7336:	22 81       	ldd	r18, Z+2	; 0x02
    7338:	62 23       	and	r22, r18
    733a:	62 83       	std	Z+2, r22	; 0x02
    733c:	08 95       	ret

0000733e <HAL_GPIO_WRITEPORT>:
	}
	
}

void HAL_GPIO_WRITEPORT(GPIO_TypeDef * PORT,uint8_t PINS,GPIO_PinState PINS_STATE)
{
    733e:	fc 01       	movw	r30, r24
	PORT->PORT_REG &=~(PINS);
    7340:	60 95       	com	r22
    7342:	92 81       	ldd	r25, Z+2	; 0x02
    7344:	69 23       	and	r22, r25
	PORT->PORT_REG |=(PINS_STATE);
    7346:	46 2b       	or	r20, r22
    7348:	42 83       	std	Z+2, r20	; 0x02
    734a:	08 95       	ret

0000734c <HAL_SPI_Init>:
		while(!(SPI_PREPH->SPI_SPSR & SPI_SPSR_SPIF));  /* wait till the spi send byte and set SPIIF bit */
		++(Handler->RxBuffer);
		--(Handler->RxBufferSize);
	}	
	HAL_GPIO_WRITEPIN(GPIOB,SPI_PIN_SS,GPIO_PIN_SET);	
}/* END_FUN HAL_SPI_Recieve()*/
    734c:	0f 93       	push	r16
    734e:	1f 93       	push	r17
    7350:	cf 93       	push	r28
    7352:	df 93       	push	r29
    7354:	00 d0       	rcall	.+0      	; 0x7356 <HAL_SPI_Init+0xa>
    7356:	1f 92       	push	r1
    7358:	cd b7       	in	r28, 0x3d	; 61
    735a:	de b7       	in	r29, 0x3e	; 62
    735c:	8c 01       	movw	r16, r24
    735e:	fc 01       	movw	r30, r24
    7360:	83 81       	ldd	r24, Z+3	; 0x03
    7362:	88 23       	and	r24, r24
    7364:	44 f4       	brge	.+16     	; 0x7376 <HAL_SPI_Init+0x2a>
    7366:	9d b1       	in	r25, 0x0d	; 13
    7368:	83 70       	andi	r24, 0x03	; 3
    736a:	89 2b       	or	r24, r25
    736c:	8d b9       	out	0x0d, r24	; 13
    736e:	8e b1       	in	r24, 0x0e	; 14
    7370:	81 60       	ori	r24, 0x01	; 1
    7372:	8e b9       	out	0x0e, r24	; 14
    7374:	04 c0       	rjmp	.+8      	; 0x737e <HAL_SPI_Init+0x32>
    7376:	9d b1       	in	r25, 0x0d	; 13
    7378:	83 70       	andi	r24, 0x03	; 3
    737a:	89 2b       	or	r24, r25
    737c:	8d b9       	out	0x0d, r24	; 13
    737e:	f8 01       	movw	r30, r16
    7380:	80 81       	ld	r24, Z
    7382:	84 ff       	sbrs	r24, 4
    7384:	16 c0       	rjmp	.+44     	; 0x73b2 <HAL_SPI_Init+0x66>
    7386:	81 e0       	ldi	r24, 0x01	; 1
    7388:	8a 83       	std	Y+2, r24	; 0x02
    738a:	80 eb       	ldi	r24, 0xB0	; 176
    738c:	89 83       	std	Y+1, r24	; 0x01
    738e:	be 01       	movw	r22, r28
    7390:	6f 5f       	subi	r22, 0xFF	; 255
    7392:	7f 4f       	sbci	r23, 0xFF	; 255
    7394:	86 e3       	ldi	r24, 0x36	; 54
    7396:	90 e0       	ldi	r25, 0x00	; 0
    7398:	0e 94 71 39 	call	0x72e2	; 0x72e2 <HAL_GPIO_INIT_PIN>
    739c:	1a 82       	std	Y+2, r1	; 0x02
    739e:	80 e4       	ldi	r24, 0x40	; 64
    73a0:	89 83       	std	Y+1, r24	; 0x01
    73a2:	be 01       	movw	r22, r28
    73a4:	6f 5f       	subi	r22, 0xFF	; 255
    73a6:	7f 4f       	sbci	r23, 0xFF	; 255
    73a8:	86 e3       	ldi	r24, 0x36	; 54
    73aa:	90 e0       	ldi	r25, 0x00	; 0
    73ac:	0e 94 71 39 	call	0x72e2	; 0x72e2 <HAL_GPIO_INIT_PIN>
    73b0:	15 c0       	rjmp	.+42     	; 0x73dc <HAL_SPI_Init+0x90>
    73b2:	1a 82       	std	Y+2, r1	; 0x02
    73b4:	80 eb       	ldi	r24, 0xB0	; 176
    73b6:	89 83       	std	Y+1, r24	; 0x01
    73b8:	be 01       	movw	r22, r28
    73ba:	6f 5f       	subi	r22, 0xFF	; 255
    73bc:	7f 4f       	sbci	r23, 0xFF	; 255
    73be:	86 e3       	ldi	r24, 0x36	; 54
    73c0:	90 e0       	ldi	r25, 0x00	; 0
    73c2:	0e 94 71 39 	call	0x72e2	; 0x72e2 <HAL_GPIO_INIT_PIN>
    73c6:	81 e0       	ldi	r24, 0x01	; 1
    73c8:	8a 83       	std	Y+2, r24	; 0x02
    73ca:	80 e4       	ldi	r24, 0x40	; 64
    73cc:	89 83       	std	Y+1, r24	; 0x01
    73ce:	be 01       	movw	r22, r28
    73d0:	6f 5f       	subi	r22, 0xFF	; 255
    73d2:	7f 4f       	sbci	r23, 0xFF	; 255
    73d4:	86 e3       	ldi	r24, 0x36	; 54
    73d6:	90 e0       	ldi	r25, 0x00	; 0
    73d8:	0e 94 71 39 	call	0x72e2	; 0x72e2 <HAL_GPIO_INIT_PIN>
    73dc:	f8 01       	movw	r30, r16
    73de:	42 81       	ldd	r20, Z+2	; 0x02
    73e0:	81 81       	ldd	r24, Z+1	; 0x01
    73e2:	34 81       	ldd	r19, Z+4	; 0x04
    73e4:	25 81       	ldd	r18, Z+5	; 0x05
    73e6:	90 81       	ld	r25, Z
    73e8:	84 2b       	or	r24, r20
    73ea:	83 2b       	or	r24, r19
    73ec:	82 2b       	or	r24, r18
    73ee:	89 2b       	or	r24, r25
    73f0:	8d b9       	out	0x0d, r24	; 13
    73f2:	8d b1       	in	r24, 0x0d	; 13
    73f4:	80 64       	ori	r24, 0x40	; 64
    73f6:	8d b9       	out	0x0d, r24	; 13
    73f8:	85 81       	ldd	r24, Z+5	; 0x05
    73fa:	80 38       	cpi	r24, 0x80	; 128
    73fc:	09 f4       	brne	.+2      	; 0x7400 <HAL_SPI_Init+0xb4>
    73fe:	78 94       	sei
    7400:	0f 90       	pop	r0
    7402:	0f 90       	pop	r0
    7404:	0f 90       	pop	r0
    7406:	df 91       	pop	r29
    7408:	cf 91       	pop	r28
    740a:	1f 91       	pop	r17
    740c:	0f 91       	pop	r16
    740e:	08 95       	ret

00007410 <HAL_SPI_Transmit>:
    7410:	cf 93       	push	r28
    7412:	df 93       	push	r29
    7414:	ec 01       	movw	r28, r24
    7416:	19 86       	std	Y+9, r1	; 0x09
    7418:	18 86       	std	Y+8, r1	; 0x08
    741a:	1d 86       	std	Y+13, r1	; 0x0d
    741c:	1c 86       	std	Y+12, r1	; 0x0c
    741e:	7f 83       	std	Y+7, r23	; 0x07
    7420:	6e 83       	std	Y+6, r22	; 0x06
    7422:	5b 87       	std	Y+11, r21	; 0x0b
    7424:	4a 87       	std	Y+10, r20	; 0x0a
    7426:	40 e0       	ldi	r20, 0x00	; 0
    7428:	60 e1       	ldi	r22, 0x10	; 16
    742a:	86 e3       	ldi	r24, 0x36	; 54
    742c:	90 e0       	ldi	r25, 0x00	; 0
    742e:	0e 94 92 39 	call	0x7324	; 0x7324 <HAL_GPIO_WRITEPIN>
    7432:	0b c0       	rjmp	.+22     	; 0x744a <HAL_SPI_Transmit+0x3a>
    7434:	ee 81       	ldd	r30, Y+6	; 0x06
    7436:	ff 81       	ldd	r31, Y+7	; 0x07
    7438:	80 81       	ld	r24, Z
    743a:	8f b9       	out	0x0f, r24	; 15
    743c:	77 9b       	sbis	0x0e, 7	; 14
    743e:	fe cf       	rjmp	.-4      	; 0x743c <HAL_SPI_Transmit+0x2c>
    7440:	8e 81       	ldd	r24, Y+6	; 0x06
    7442:	9f 81       	ldd	r25, Y+7	; 0x07
    7444:	01 96       	adiw	r24, 0x01	; 1
    7446:	9f 83       	std	Y+7, r25	; 0x07
    7448:	8e 83       	std	Y+6, r24	; 0x06
    744a:	8a 85       	ldd	r24, Y+10	; 0x0a
    744c:	9b 85       	ldd	r25, Y+11	; 0x0b
    744e:	9c 01       	movw	r18, r24
    7450:	21 50       	subi	r18, 0x01	; 1
    7452:	31 09       	sbc	r19, r1
    7454:	3b 87       	std	Y+11, r19	; 0x0b
    7456:	2a 87       	std	Y+10, r18	; 0x0a
    7458:	89 2b       	or	r24, r25
    745a:	61 f7       	brne	.-40     	; 0x7434 <HAL_SPI_Transmit+0x24>
    745c:	41 e0       	ldi	r20, 0x01	; 1
    745e:	60 e1       	ldi	r22, 0x10	; 16
    7460:	86 e3       	ldi	r24, 0x36	; 54
    7462:	90 e0       	ldi	r25, 0x00	; 0
    7464:	0e 94 92 39 	call	0x7324	; 0x7324 <HAL_GPIO_WRITEPIN>
    7468:	df 91       	pop	r29
    746a:	cf 91       	pop	r28
    746c:	08 95       	ret

0000746e <HAL_SPI_TransmitRecive>:
 * param. : pTxData --> pointer to the Tx buffer 
 * param. : pRxData --> pointer to the rx buffer
 * param. : size : the required number of bytes to received and transmit 
*/
 void HAL_SPI_TransmitRecive(SPI_Handler_t * Handler,uint8_t * pTxData,uint8_t * pRxData,uint16_t size )
{
    746e:	cf 93       	push	r28
    7470:	df 93       	push	r29
    7472:	ec 01       	movw	r28, r24
	Handler->RxBuffer = pRxData ;
    7474:	59 87       	std	Y+9, r21	; 0x09
    7476:	48 87       	std	Y+8, r20	; 0x08
	Handler->TxBuffer = pTxData  ;
    7478:	7f 83       	std	Y+7, r23	; 0x07
    747a:	6e 83       	std	Y+6, r22	; 0x06
	Handler->RxBufferSize = size ;
    747c:	3d 87       	std	Y+13, r19	; 0x0d
    747e:	2c 87       	std	Y+12, r18	; 0x0c
	Handler->TxBufferSize = size;
    7480:	3b 87       	std	Y+11, r19	; 0x0b
    7482:	2a 87       	std	Y+10, r18	; 0x0a

	HAL_GPIO_WRITEPIN(GPIOB,SPI_PIN_SS,GPIO_PIN_RESET);
    7484:	40 e0       	ldi	r20, 0x00	; 0
    7486:	60 e1       	ldi	r22, 0x10	; 16
    7488:	86 e3       	ldi	r24, 0x36	; 54
    748a:	90 e0       	ldi	r25, 0x00	; 0
    748c:	0e 94 92 39 	call	0x7324	; 0x7324 <HAL_GPIO_WRITEPIN>

	while(Handler->RxBufferSize-- > 0)  /* block till end operation */
    7490:	14 c0       	rjmp	.+40     	; 0x74ba <HAL_SPI_TransmitRecive+0x4c>
	{

		SPI_PREPH->SPI_SPDR = *(Handler->TxBuffer);
    7492:	ee 81       	ldd	r30, Y+6	; 0x06
    7494:	ff 81       	ldd	r31, Y+7	; 0x07
    7496:	80 81       	ld	r24, Z
    7498:	8f b9       	out	0x0f, r24	; 15
		while(!(SPI_PREPH->SPI_SPSR & SPI_SPSR_SPIF));  /* wait till the SPI send byte and set SPIIF bit */
    749a:	77 9b       	sbis	0x0e, 7	; 14
    749c:	fe cf       	rjmp	.-4      	; 0x749a <HAL_SPI_TransmitRecive+0x2c>
		*(Handler->RxBuffer) = SPI_PREPH->SPI_SPDR ;
    749e:	e8 85       	ldd	r30, Y+8	; 0x08
    74a0:	f9 85       	ldd	r31, Y+9	; 0x09
    74a2:	8f b1       	in	r24, 0x0f	; 15
    74a4:	80 83       	st	Z, r24
		++(Handler->RxBuffer);
    74a6:	88 85       	ldd	r24, Y+8	; 0x08
    74a8:	99 85       	ldd	r25, Y+9	; 0x09
    74aa:	01 96       	adiw	r24, 0x01	; 1
    74ac:	99 87       	std	Y+9, r25	; 0x09
    74ae:	88 87       	std	Y+8, r24	; 0x08
		++(Handler->TxBuffer);
    74b0:	8e 81       	ldd	r24, Y+6	; 0x06
    74b2:	9f 81       	ldd	r25, Y+7	; 0x07
    74b4:	01 96       	adiw	r24, 0x01	; 1
    74b6:	9f 83       	std	Y+7, r25	; 0x07
    74b8:	8e 83       	std	Y+6, r24	; 0x06
	Handler->RxBufferSize = size ;
	Handler->TxBufferSize = size;

	HAL_GPIO_WRITEPIN(GPIOB,SPI_PIN_SS,GPIO_PIN_RESET);

	while(Handler->RxBufferSize-- > 0)  /* block till end operation */
    74ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    74bc:	9d 85       	ldd	r25, Y+13	; 0x0d
    74be:	9c 01       	movw	r18, r24
    74c0:	21 50       	subi	r18, 0x01	; 1
    74c2:	31 09       	sbc	r19, r1
    74c4:	3d 87       	std	Y+13, r19	; 0x0d
    74c6:	2c 87       	std	Y+12, r18	; 0x0c
    74c8:	89 2b       	or	r24, r25
    74ca:	19 f7       	brne	.-58     	; 0x7492 <HAL_SPI_TransmitRecive+0x24>
		*(Handler->RxBuffer) = SPI_PREPH->SPI_SPDR ;
		++(Handler->RxBuffer);
		++(Handler->TxBuffer);
		
	}	
	HAL_GPIO_WRITEPIN(GPIOB,SPI_PIN_SS,GPIO_PIN_SET);
    74cc:	41 e0       	ldi	r20, 0x01	; 1
    74ce:	60 e1       	ldi	r22, 0x10	; 16
    74d0:	86 e3       	ldi	r24, 0x36	; 54
    74d2:	90 e0       	ldi	r25, 0x00	; 0
    74d4:	0e 94 92 39 	call	0x7324	; 0x7324 <HAL_GPIO_WRITEPIN>
	
}/* END_FUN HAL_TransmitRecive()*/
    74d8:	df 91       	pop	r29
    74da:	cf 91       	pop	r28
    74dc:	08 95       	ret

000074de <LCD_Triger_Enable>:
	LCD_Goto_Location(y,x);
	HAL_GPIO_WRITEPIN(GPIOB,LCD_RS_GPIOB,GPIO_PIN_SET);
	HAL_GPIO_WRITEPIN(GPIOB,LCD_RW_GPIOB,GPIO_PIN_RESET);
	LCD_Send_4BitData(ch);
	
}
    74de:	41 e0       	ldi	r20, 0x01	; 1
    74e0:	68 e0       	ldi	r22, 0x08	; 8
    74e2:	86 e3       	ldi	r24, 0x36	; 54
    74e4:	90 e0       	ldi	r25, 0x00	; 0
    74e6:	0e 94 92 39 	call	0x7324	; 0x7324 <HAL_GPIO_WRITEPIN>
    74ea:	85 e0       	ldi	r24, 0x05	; 5
    74ec:	8a 95       	dec	r24
    74ee:	f1 f7       	brne	.-4      	; 0x74ec <LCD_Triger_Enable+0xe>
    74f0:	00 00       	nop
    74f2:	40 e0       	ldi	r20, 0x00	; 0
    74f4:	68 e0       	ldi	r22, 0x08	; 8
    74f6:	86 e3       	ldi	r24, 0x36	; 54
    74f8:	90 e0       	ldi	r25, 0x00	; 0
    74fa:	0e 94 92 39 	call	0x7324	; 0x7324 <HAL_GPIO_WRITEPIN>
    74fe:	8f e3       	ldi	r24, 0x3F	; 63
    7500:	9f e1       	ldi	r25, 0x1F	; 31
    7502:	01 97       	sbiw	r24, 0x01	; 1
    7504:	f1 f7       	brne	.-4      	; 0x7502 <LCD_Triger_Enable+0x24>
    7506:	00 c0       	rjmp	.+0      	; 0x7508 <LCD_Triger_Enable+0x2a>
    7508:	00 00       	nop
    750a:	08 95       	ret

0000750c <LCD_Send_4BitData>:
    750c:	cf 93       	push	r28
    750e:	c8 2f       	mov	r28, r24
    7510:	48 2f       	mov	r20, r24
    7512:	40 7f       	andi	r20, 0xF0	; 240
    7514:	60 ef       	ldi	r22, 0xF0	; 240
    7516:	89 e3       	ldi	r24, 0x39	; 57
    7518:	90 e0       	ldi	r25, 0x00	; 0
    751a:	0e 94 9f 39 	call	0x733e	; 0x733e <HAL_GPIO_WRITEPORT>
    751e:	0e 94 6f 3a 	call	0x74de	; 0x74de <LCD_Triger_Enable>
    7522:	80 e1       	ldi	r24, 0x10	; 16
    7524:	c8 9f       	mul	r28, r24
    7526:	a0 01       	movw	r20, r0
    7528:	11 24       	eor	r1, r1
    752a:	60 ef       	ldi	r22, 0xF0	; 240
    752c:	89 e3       	ldi	r24, 0x39	; 57
    752e:	90 e0       	ldi	r25, 0x00	; 0
    7530:	0e 94 9f 39 	call	0x733e	; 0x733e <HAL_GPIO_WRITEPORT>
    7534:	0e 94 6f 3a 	call	0x74de	; 0x74de <LCD_Triger_Enable>
    7538:	cf 91       	pop	r28
    753a:	08 95       	ret

0000753c <LCD_Send_A_Character_With_CurrLoc>:
    753c:	cf 93       	push	r28
    753e:	c8 2f       	mov	r28, r24
    7540:	41 e0       	ldi	r20, 0x01	; 1
    7542:	62 e0       	ldi	r22, 0x02	; 2
    7544:	86 e3       	ldi	r24, 0x36	; 54
    7546:	90 e0       	ldi	r25, 0x00	; 0
    7548:	0e 94 92 39 	call	0x7324	; 0x7324 <HAL_GPIO_WRITEPIN>
    754c:	40 e0       	ldi	r20, 0x00	; 0
    754e:	64 e0       	ldi	r22, 0x04	; 4
    7550:	86 e3       	ldi	r24, 0x36	; 54
    7552:	90 e0       	ldi	r25, 0x00	; 0
    7554:	0e 94 92 39 	call	0x7324	; 0x7324 <HAL_GPIO_WRITEPIN>
    7558:	8c 2f       	mov	r24, r28
    755a:	0e 94 86 3a 	call	0x750c	; 0x750c <LCD_Send_4BitData>
    755e:	cf 91       	pop	r28
    7560:	08 95       	ret

00007562 <LCD_Send_A_Command>:
    7562:	cf 93       	push	r28
    7564:	c8 2f       	mov	r28, r24
    7566:	40 e0       	ldi	r20, 0x00	; 0
    7568:	66 e0       	ldi	r22, 0x06	; 6
    756a:	86 e3       	ldi	r24, 0x36	; 54
    756c:	90 e0       	ldi	r25, 0x00	; 0
    756e:	0e 94 92 39 	call	0x7324	; 0x7324 <HAL_GPIO_WRITEPIN>
    7572:	8c 2f       	mov	r24, r28
    7574:	0e 94 86 3a 	call	0x750c	; 0x750c <LCD_Send_4BitData>
    7578:	cf 91       	pop	r28
    757a:	08 95       	ret

0000757c <LCD_Send_A_String_With_CurrLoc>:
    757c:	cf 93       	push	r28
    757e:	df 93       	push	r29
    7580:	ec 01       	movw	r28, r24
    7582:	03 c0       	rjmp	.+6      	; 0x758a <LCD_Send_A_String_With_CurrLoc+0xe>
    7584:	21 96       	adiw	r28, 0x01	; 1
    7586:	0e 94 9e 3a 	call	0x753c	; 0x753c <LCD_Send_A_Character_With_CurrLoc>
    758a:	88 81       	ld	r24, Y
    758c:	81 11       	cpse	r24, r1
    758e:	fa cf       	rjmp	.-12     	; 0x7584 <LCD_Send_A_String_With_CurrLoc+0x8>
    7590:	df 91       	pop	r29
    7592:	cf 91       	pop	r28
    7594:	08 95       	ret

00007596 <LCD_Goto_Location>:
    7596:	e8 2f       	mov	r30, r24
    7598:	f0 e0       	ldi	r31, 0x00	; 0
    759a:	e1 5a       	subi	r30, 0xA1	; 161
    759c:	ff 4f       	sbci	r31, 0xFF	; 255
    759e:	80 81       	ld	r24, Z
    75a0:	86 0f       	add	r24, r22
    75a2:	81 50       	subi	r24, 0x01	; 1
    75a4:	0e 94 b1 3a 	call	0x7562	; 0x7562 <LCD_Send_A_Command>
    75a8:	08 95       	ret

000075aa <LCD_Initializaion>:
	LCD_Send_A_Command(column_position[y-1]+(x-1));
}


void LCD_Initializaion(void)
{
    75aa:	cf 93       	push	r28
    75ac:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    75ae:	2f ef       	ldi	r18, 0xFF	; 255
    75b0:	89 ef       	ldi	r24, 0xF9	; 249
    75b2:	90 e0       	ldi	r25, 0x00	; 0
    75b4:	21 50       	subi	r18, 0x01	; 1
    75b6:	80 40       	sbci	r24, 0x00	; 0
    75b8:	90 40       	sbci	r25, 0x00	; 0
    75ba:	e1 f7       	brne	.-8      	; 0x75b4 <LCD_Initializaion+0xa>
    75bc:	00 c0       	rjmp	.+0      	; 0x75be <LCD_Initializaion+0x14>
    75be:	00 00       	nop
	_delay_ms(20);
	// initialize portB pin 1,2,3 as output
	LCD_GPIO_Handler.mode = GPIO_MODE_OUTPUT ;
    75c0:	c3 e9       	ldi	r28, 0x93	; 147
    75c2:	d0 e0       	ldi	r29, 0x00	; 0
    75c4:	81 e0       	ldi	r24, 0x01	; 1
    75c6:	89 83       	std	Y+1, r24	; 0x01
	LCD_GPIO_Handler.pinS = LCD_RW_GPIOB |LCD_RS_GPIOB |LCD_EN_GPIOB ;
    75c8:	8e e0       	ldi	r24, 0x0E	; 14
    75ca:	88 83       	st	Y, r24
	LCD_GPIO_Handler.pull =GPIO_NOPULL ;
    75cc:	1a 82       	std	Y+2, r1	; 0x02
	HAL_GPIO_INIT_PIN(GPIOB,&LCD_GPIO_Handler);
    75ce:	be 01       	movw	r22, r28
    75d0:	86 e3       	ldi	r24, 0x36	; 54
    75d2:	90 e0       	ldi	r25, 0x00	; 0
    75d4:	0e 94 71 39 	call	0x72e2	; 0x72e2 <HAL_GPIO_INIT_PIN>
	
	// initialize portA pin 4,5,6,7 as output	
	LCD_GPIO_Handler.pinS = LCD_D4_GPIOA|LCD_D5_GPIOA|LCD_D6_GPIOA|LCD_D7_GPIOA;
    75d8:	80 ef       	ldi	r24, 0xF0	; 240
    75da:	88 83       	st	Y, r24
	HAL_GPIO_INIT_PIN(GPIOA,&LCD_GPIO_Handler);
    75dc:	be 01       	movw	r22, r28
    75de:	89 e3       	ldi	r24, 0x39	; 57
    75e0:	90 e0       	ldi	r25, 0x00	; 0
    75e2:	0e 94 71 39 	call	0x72e2	; 0x72e2 <HAL_GPIO_INIT_PIN>

	LCD_Send_A_Command(0x33U); // LCD initialization command 
    75e6:	83 e3       	ldi	r24, 0x33	; 51
    75e8:	0e 94 b1 3a 	call	0x7562	; 0x7562 <LCD_Send_A_Command>
	LCD_Send_A_Command(0x32U);
    75ec:	82 e3       	ldi	r24, 0x32	; 50
    75ee:	0e 94 b1 3a 	call	0x7562	; 0x7562 <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_2LINE_4_BIT_MODE);
    75f2:	88 e2       	ldi	r24, 0x28	; 40
    75f4:	0e 94 b1 3a 	call	0x7562	; 0x7562 <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_COMMANED_CLEAR_CURSOR_OFF);
    75f8:	8c e0       	ldi	r24, 0x0C	; 12
    75fa:	0e 94 b1 3a 	call	0x7562	; 0x7562 <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_COMMANED_CLEAR_LCD);
    75fe:	81 e0       	ldi	r24, 0x01	; 1
    7600:	0e 94 b1 3a 	call	0x7562	; 0x7562 <LCD_Send_A_Command>
	
}
    7604:	df 91       	pop	r29
    7606:	cf 91       	pop	r28
    7608:	08 95       	ret

0000760a <LCD_Send_A_String_WithLoc>:

void LCD_Send_A_String_WithLoc(uint8_t y, uint8_t x, uint8_t *StringOfCharacters)
{
    760a:	cf 93       	push	r28
    760c:	df 93       	push	r29
    760e:	ea 01       	movw	r28, r20
	LCD_Goto_Location(y,x);
    7610:	0e 94 cb 3a 	call	0x7596	; 0x7596 <LCD_Goto_Location>
	while (*StringOfCharacters != 0)
    7614:	03 c0       	rjmp	.+6      	; 0x761c <LCD_Send_A_String_WithLoc+0x12>
	{
		LCD_Send_A_Character_With_CurrLoc(*StringOfCharacters++);
    7616:	21 96       	adiw	r28, 0x01	; 1
    7618:	0e 94 9e 3a 	call	0x753c	; 0x753c <LCD_Send_A_Character_With_CurrLoc>
}

void LCD_Send_A_String_WithLoc(uint8_t y, uint8_t x, uint8_t *StringOfCharacters)
{
	LCD_Goto_Location(y,x);
	while (*StringOfCharacters != 0)
    761c:	88 81       	ld	r24, Y
    761e:	81 11       	cpse	r24, r1
    7620:	fa cf       	rjmp	.-12     	; 0x7616 <LCD_Send_A_String_WithLoc+0xc>
	{
		LCD_Send_A_Character_With_CurrLoc(*StringOfCharacters++);
	}
}
    7622:	df 91       	pop	r29
    7624:	cf 91       	pop	r28
    7626:	08 95       	ret

00007628 <main>:
{
	
	
	
	/* vector table relocated to bootloader section */
		GICR = 1 << IVCE ; 
    7628:	81 e0       	ldi	r24, 0x01	; 1
    762a:	8b bf       	out	0x3b, r24	; 59
		GICR = 1 << IVSEL ;
    762c:	82 e0       	ldi	r24, 0x02	; 2
    762e:	8b bf       	out	0x3b, r24	; 59
		DDRD = 0xe0;
    7630:	80 ee       	ldi	r24, 0xE0	; 224
    7632:	81 bb       	out	0x11, r24	; 17
	
	uint8_t sreg;  /* Temp var to hold the status register value */


	
	MCP2515_init();   /* initialize the MCP2515 chip */
    7634:	0e 94 5a 3d 	call	0x7ab4	; 0x7ab4 <MCP2515_init>
	LCD_Initializaion(); /* initialize LCD */
    7638:	0e 94 d5 3a 	call	0x75aa	; 0x75aa <LCD_Initializaion>

    /* Replace with your application code */
    while (1) 
    {

		LCD_Send_A_String_With_CurrLoc((uint8_t *)"Waiting Image");
    763c:	82 e6       	ldi	r24, 0x62	; 98
    763e:	90 e0       	ldi	r25, 0x00	; 0
    7640:	0e 94 be 3a 	call	0x757c	; 0x757c <LCD_Send_A_String_With_CurrLoc>

		if(eepromadd > MesStartLine)
    7644:	c0 91 97 00 	lds	r28, 0x0097	; 0x800097 <MesStartLine>
    7648:	2c 2f       	mov	r18, r28
    764a:	30 e0       	ldi	r19, 0x00	; 0
    764c:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <eepromadd>
    7650:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <eepromadd+0x1>
    7654:	28 17       	cp	r18, r24
    7656:	39 07       	cpc	r19, r25
    7658:	98 f4       	brcc	.+38     	; 0x7680 <main+0x58>
		{
			LineDataSize =  eeprom_read_byte((uint8_t *)MesStartLine);
    765a:	89 01       	movw	r16, r18
    765c:	c8 01       	movw	r24, r16
    765e:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <eeprom_read_byte>
    7662:	d8 2f       	mov	r29, r24
    7664:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <LineDataSize>
			MesStartLine += eeprom_read_byte((uint8_t *)MesStartLine)+5;
    7668:	c8 01       	movw	r24, r16
    766a:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <eeprom_read_byte>
    766e:	8c 0f       	add	r24, r28
    7670:	8b 5f       	subi	r24, 0xFB	; 251
    7672:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <MesStartLine>
			if(LineDataSize == 0x00 ) ImageIsReady = true;
    7676:	d1 11       	cpse	r29, r1
    7678:	03 c0       	rjmp	.+6      	; 0x7680 <main+0x58>
    767a:	81 e0       	ldi	r24, 0x01	; 1
    767c:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <ImageIsReady>
		
		
		
		
		/* now we received our message successfully so we need to carry out the boot operation */
		if (ImageIsReady)
    7680:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <ImageIsReady>
    7684:	88 23       	and	r24, r24
    7686:	71 f1       	breq	.+92     	; 0x76e4 <main+0xbc>
		{
		cli();
    7688:	f8 94       	cli

		/* Disable interrupts before start nay operation on the flash as explained in the data sheet */
		sreg = SREG;
    768a:	cf b7       	in	r28, 0x3f	; 63
		
		if(StoreHexImageInFlashImage( & LineParsing)){
    768c:	88 eb       	ldi	r24, 0xB8	; 184
    768e:	90 e0       	ldi	r25, 0x00	; 0
    7690:	0e 94 a9 38 	call	0x7152	; 0x7152 <StoreHexImageInFlashImage>
    7694:	88 23       	and	r24, r24
    7696:	f9 f0       	breq	.+62     	; 0x76d6 <main+0xae>
		
		/* branch to the application section in the flash */
			LCD_Send_A_Command(LCD_COMMANED_CLEAR_LCD);
    7698:	81 e0       	ldi	r24, 0x01	; 1
    769a:	0e 94 b1 3a 	call	0x7562	; 0x7562 <LCD_Send_A_Command>
			LCD_Send_A_String_WithLoc(1,3,(uint8_t *)"branching to ");
    769e:	40 e7       	ldi	r20, 0x70	; 112
    76a0:	50 e0       	ldi	r21, 0x00	; 0
    76a2:	63 e0       	ldi	r22, 0x03	; 3
    76a4:	81 e0       	ldi	r24, 0x01	; 1
    76a6:	0e 94 05 3b 	call	0x760a	; 0x760a <LCD_Send_A_String_WithLoc>
			LCD_Send_A_String_WithLoc(2,3,(uint8_t *)"image");
    76aa:	4e e7       	ldi	r20, 0x7E	; 126
    76ac:	50 e0       	ldi	r21, 0x00	; 0
    76ae:	63 e0       	ldi	r22, 0x03	; 3
    76b0:	82 e0       	ldi	r24, 0x02	; 2
    76b2:	0e 94 05 3b 	call	0x760a	; 0x760a <LCD_Send_A_String_WithLoc>
    76b6:	2f ef       	ldi	r18, 0xFF	; 255
    76b8:	8b e7       	ldi	r24, 0x7B	; 123
    76ba:	92 e9       	ldi	r25, 0x92	; 146
    76bc:	21 50       	subi	r18, 0x01	; 1
    76be:	80 40       	sbci	r24, 0x00	; 0
    76c0:	90 40       	sbci	r25, 0x00	; 0
    76c2:	e1 f7       	brne	.-8      	; 0x76bc <main+0x94>
    76c4:	00 c0       	rjmp	.+0      	; 0x76c6 <main+0x9e>
    76c6:	00 00       	nop
			_delay_ms(3000);
			LCD_Send_A_Command(LCD_COMMANED_CLEAR_LCD);
    76c8:	81 e0       	ldi	r24, 0x01	; 1
    76ca:	0e 94 b1 3a 	call	0x7562	; 0x7562 <LCD_Send_A_Command>

			SREG = sreg;
    76ce:	cf bf       	out	0x3f, r28	; 63
			asm ( "jmp 0x0000" );			
    76d0:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>
    76d4:	07 c0       	rjmp	.+14     	; 0x76e4 <main+0xbc>
			//
			
		}
		else
		{
			LCD_Send_A_Command(LCD_COMMANED_CLEAR_LCD);
    76d6:	81 e0       	ldi	r24, 0x01	; 1
    76d8:	0e 94 b1 3a 	call	0x7562	; 0x7562 <LCD_Send_A_Command>
			LCD_Send_A_String_With_CurrLoc((uint8_t *)"Invalid Image");
    76dc:	84 e8       	ldi	r24, 0x84	; 132
    76de:	90 e0       	ldi	r25, 0x00	; 0
    76e0:	0e 94 be 3a 	call	0x757c	; 0x757c <LCD_Send_A_String_With_CurrLoc>
    76e4:	2f ef       	ldi	r18, 0xFF	; 255
    76e6:	83 ec       	ldi	r24, 0xC3	; 195
    76e8:	99 e0       	ldi	r25, 0x09	; 9
    76ea:	21 50       	subi	r18, 0x01	; 1
    76ec:	80 40       	sbci	r24, 0x00	; 0
    76ee:	90 40       	sbci	r25, 0x00	; 0
    76f0:	e1 f7       	brne	.-8      	; 0x76ea <main+0xc2>
    76f2:	00 c0       	rjmp	.+0      	; 0x76f4 <main+0xcc>
    76f4:	00 00       	nop
		}
		
		    }
	_delay_ms(200);
		
		LCD_Send_A_Command(LCD_COMMANED_CLEAR_LCD);
    76f6:	81 e0       	ldi	r24, 0x01	; 1
    76f8:	0e 94 b1 3a 	call	0x7562	; 0x7562 <LCD_Send_A_Command>

	
	}
    76fc:	9f cf       	rjmp	.-194    	; 0x763c <main+0x14>

000076fe <__vector_1>:
	return 0 ;
}

ISR(INT0_vect)
{
    76fe:	1f 92       	push	r1
    7700:	0f 92       	push	r0
    7702:	0f b6       	in	r0, 0x3f	; 63
    7704:	0f 92       	push	r0
    7706:	11 24       	eor	r1, r1
    7708:	2f 93       	push	r18
    770a:	3f 93       	push	r19
    770c:	4f 93       	push	r20
    770e:	5f 93       	push	r21
    7710:	6f 93       	push	r22
    7712:	7f 93       	push	r23
    7714:	8f 93       	push	r24
    7716:	9f 93       	push	r25
    7718:	af 93       	push	r26
    771a:	bf 93       	push	r27
    771c:	ef 93       	push	r30
    771e:	ff 93       	push	r31
	
	MCP2515_receiveMesg(&RecievedMesg);
    7720:	8a ea       	ldi	r24, 0xAA	; 170
    7722:	90 e0       	ldi	r25, 0x00	; 0
    7724:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <MCP2515_receiveMesg>
	eeprom_write_block((void *)RecievedMesg.MesgData ,(void *)eepromadd ,8 );
    7728:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <eepromadd>
    772c:	70 91 a9 00 	lds	r23, 0x00A9	; 0x8000a9 <eepromadd+0x1>
    7730:	48 e0       	ldi	r20, 0x08	; 8
    7732:	50 e0       	ldi	r21, 0x00	; 0
    7734:	8f ea       	ldi	r24, 0xAF	; 175
    7736:	90 e0       	ldi	r25, 0x00	; 0
    7738:	0e 94 08 3e 	call	0x7c10	; 0x7c10 <eeprom_write_block>
	eepromadd += 8;
    773c:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <eepromadd>
    7740:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <eepromadd+0x1>
    7744:	08 96       	adiw	r24, 0x08	; 8
    7746:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <eepromadd+0x1>
    774a:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <eepromadd>


    774e:	ff 91       	pop	r31
    7750:	ef 91       	pop	r30
    7752:	bf 91       	pop	r27
    7754:	af 91       	pop	r26
    7756:	9f 91       	pop	r25
    7758:	8f 91       	pop	r24
    775a:	7f 91       	pop	r23
    775c:	6f 91       	pop	r22
    775e:	5f 91       	pop	r21
    7760:	4f 91       	pop	r20
    7762:	3f 91       	pop	r19
    7764:	2f 91       	pop	r18
    7766:	0f 90       	pop	r0
    7768:	0f be       	out	0x3f, r0	; 63
    776a:	0f 90       	pop	r0
    776c:	1f 90       	pop	r1
    776e:	18 95       	reti

00007770 <MCP2515_Read_Register>:
	dataTx[0] = 0x81+TXnum;
	HAL_SPI_Transmit(&MCP2515_SPIHandler,dataTx,1);
	
	
	
}/* END_FUN MCP2515_SendCANmsg() */
    7770:	cf 93       	push	r28
    7772:	df 93       	push	r29
    7774:	00 d0       	rcall	.+0      	; 0x7776 <MCP2515_Read_Register+0x6>
    7776:	1f 92       	push	r1
    7778:	cd b7       	in	r28, 0x3d	; 61
    777a:	de b7       	in	r29, 0x3e	; 62
    777c:	93 e0       	ldi	r25, 0x03	; 3
    777e:	99 83       	std	Y+1, r25	; 0x01
    7780:	8a 83       	std	Y+2, r24	; 0x02
    7782:	1b 82       	std	Y+3, r1	; 0x03
    7784:	23 e0       	ldi	r18, 0x03	; 3
    7786:	30 e0       	ldi	r19, 0x00	; 0
    7788:	ae 01       	movw	r20, r28
    778a:	4f 5f       	subi	r20, 0xFF	; 255
    778c:	5f 4f       	sbci	r21, 0xFF	; 255
    778e:	ba 01       	movw	r22, r20
    7790:	8a e9       	ldi	r24, 0x9A	; 154
    7792:	90 e0       	ldi	r25, 0x00	; 0
    7794:	0e 94 37 3a 	call	0x746e	; 0x746e <HAL_SPI_TransmitRecive>
    7798:	8b 81       	ldd	r24, Y+3	; 0x03
    779a:	0f 90       	pop	r0
    779c:	0f 90       	pop	r0
    779e:	0f 90       	pop	r0
    77a0:	df 91       	pop	r29
    77a2:	cf 91       	pop	r28
    77a4:	08 95       	ret

000077a6 <MCP2515_Write_Register>:
    77a6:	cf 93       	push	r28
    77a8:	df 93       	push	r29
    77aa:	00 d0       	rcall	.+0      	; 0x77ac <MCP2515_Write_Register+0x6>
    77ac:	1f 92       	push	r1
    77ae:	cd b7       	in	r28, 0x3d	; 61
    77b0:	de b7       	in	r29, 0x3e	; 62
    77b2:	92 e0       	ldi	r25, 0x02	; 2
    77b4:	99 83       	std	Y+1, r25	; 0x01
    77b6:	8a 83       	std	Y+2, r24	; 0x02
    77b8:	6b 83       	std	Y+3, r22	; 0x03
    77ba:	43 e0       	ldi	r20, 0x03	; 3
    77bc:	50 e0       	ldi	r21, 0x00	; 0
    77be:	be 01       	movw	r22, r28
    77c0:	6f 5f       	subi	r22, 0xFF	; 255
    77c2:	7f 4f       	sbci	r23, 0xFF	; 255
    77c4:	8a e9       	ldi	r24, 0x9A	; 154
    77c6:	90 e0       	ldi	r25, 0x00	; 0
    77c8:	0e 94 08 3a 	call	0x7410	; 0x7410 <HAL_SPI_Transmit>
    77cc:	0f 90       	pop	r0
    77ce:	0f 90       	pop	r0
    77d0:	0f 90       	pop	r0
    77d2:	df 91       	pop	r29
    77d4:	cf 91       	pop	r28
    77d6:	08 95       	ret

000077d8 <MCP2515_Rest>:
    77d8:	cf 93       	push	r28
    77da:	df 93       	push	r29
    77dc:	1f 92       	push	r1
    77de:	cd b7       	in	r28, 0x3d	; 61
    77e0:	de b7       	in	r29, 0x3e	; 62
    77e2:	80 ec       	ldi	r24, 0xC0	; 192
    77e4:	89 83       	std	Y+1, r24	; 0x01
    77e6:	41 e0       	ldi	r20, 0x01	; 1
    77e8:	50 e0       	ldi	r21, 0x00	; 0
    77ea:	be 01       	movw	r22, r28
    77ec:	6f 5f       	subi	r22, 0xFF	; 255
    77ee:	7f 4f       	sbci	r23, 0xFF	; 255
    77f0:	8a e9       	ldi	r24, 0x9A	; 154
    77f2:	90 e0       	ldi	r25, 0x00	; 0
    77f4:	0e 94 08 3a 	call	0x7410	; 0x7410 <HAL_SPI_Transmit>
    77f8:	2f ef       	ldi	r18, 0xFF	; 255
    77fa:	89 ef       	ldi	r24, 0xF9	; 249
    77fc:	90 e0       	ldi	r25, 0x00	; 0
    77fe:	21 50       	subi	r18, 0x01	; 1
    7800:	80 40       	sbci	r24, 0x00	; 0
    7802:	90 40       	sbci	r25, 0x00	; 0
    7804:	e1 f7       	brne	.-8      	; 0x77fe <MCP2515_Rest+0x26>
    7806:	00 c0       	rjmp	.+0      	; 0x7808 <MCP2515_Rest+0x30>
    7808:	00 00       	nop
    780a:	0f 90       	pop	r0
    780c:	df 91       	pop	r29
    780e:	cf 91       	pop	r28
    7810:	08 95       	ret

00007812 <MCP2515_SetBitTiming>:
    7812:	cf 93       	push	r28
    7814:	df 93       	push	r29
    7816:	d6 2f       	mov	r29, r22
    7818:	c4 2f       	mov	r28, r20
    781a:	68 2f       	mov	r22, r24
    781c:	8a e2       	ldi	r24, 0x2A	; 42
    781e:	0e 94 d3 3b 	call	0x77a6	; 0x77a6 <MCP2515_Write_Register>
    7822:	6d 2f       	mov	r22, r29
    7824:	89 e2       	ldi	r24, 0x29	; 41
    7826:	0e 94 d3 3b 	call	0x77a6	; 0x77a6 <MCP2515_Write_Register>
    782a:	6c 2f       	mov	r22, r28
    782c:	88 e2       	ldi	r24, 0x28	; 40
    782e:	0e 94 d3 3b 	call	0x77a6	; 0x77a6 <MCP2515_Write_Register>
    7832:	df 91       	pop	r29
    7834:	cf 91       	pop	r28
    7836:	08 95       	ret

00007838 <MCP2515_Set_OperMode>:
    7838:	cf 93       	push	r28
    783a:	df 93       	push	r29
    783c:	00 d0       	rcall	.+0      	; 0x783e <MCP2515_Set_OperMode+0x6>
    783e:	1f 92       	push	r1
    7840:	cd b7       	in	r28, 0x3d	; 61
    7842:	de b7       	in	r29, 0x3e	; 62
    7844:	92 e0       	ldi	r25, 0x02	; 2
    7846:	99 83       	std	Y+1, r25	; 0x01
    7848:	9f e0       	ldi	r25, 0x0F	; 15
    784a:	9a 83       	std	Y+2, r25	; 0x02
    784c:	8b 83       	std	Y+3, r24	; 0x03
    784e:	43 e0       	ldi	r20, 0x03	; 3
    7850:	50 e0       	ldi	r21, 0x00	; 0
    7852:	be 01       	movw	r22, r28
    7854:	6f 5f       	subi	r22, 0xFF	; 255
    7856:	7f 4f       	sbci	r23, 0xFF	; 255
    7858:	8a e9       	ldi	r24, 0x9A	; 154
    785a:	90 e0       	ldi	r25, 0x00	; 0
    785c:	0e 94 08 3a 	call	0x7410	; 0x7410 <HAL_SPI_Transmit>
    7860:	0f 90       	pop	r0
    7862:	0f 90       	pop	r0
    7864:	0f 90       	pop	r0
    7866:	df 91       	pop	r29
    7868:	cf 91       	pop	r28
    786a:	08 95       	ret

0000786c <MCP2515_SetMask>:
    786c:	cf 92       	push	r12
    786e:	df 92       	push	r13
    7870:	ef 92       	push	r14
    7872:	ff 92       	push	r15
    7874:	cf 93       	push	r28
    7876:	c8 2f       	mov	r28, r24
    7878:	6a 01       	movw	r12, r20
    787a:	7b 01       	movw	r14, r22
    787c:	22 23       	and	r18, r18
    787e:	09 f4       	brne	.+2      	; 0x7882 <MCP2515_SetMask+0x16>
    7880:	4a c0       	rjmp	.+148    	; 0x7916 <MCP2515_SetMask+0xaa>
    7882:	cb 01       	movw	r24, r22
    7884:	ba 01       	movw	r22, r20
    7886:	68 94       	set
    7888:	12 f8       	bld	r1, 2
    788a:	96 95       	lsr	r25
    788c:	87 95       	ror	r24
    788e:	77 95       	ror	r23
    7890:	67 95       	ror	r22
    7892:	16 94       	lsr	r1
    7894:	d1 f7       	brne	.-12     	; 0x788a <MCP2515_SetMask+0x1e>
    7896:	2c 2f       	mov	r18, r28
    7898:	30 e0       	ldi	r19, 0x00	; 0
    789a:	28 5f       	subi	r18, 0xF8	; 248
    789c:	3f 4f       	sbci	r19, 0xFF	; 255
    789e:	82 2f       	mov	r24, r18
    78a0:	88 0f       	add	r24, r24
    78a2:	88 0f       	add	r24, r24
    78a4:	0e 94 d3 3b 	call	0x77a6	; 0x77a6 <MCP2515_Write_Register>
    78a8:	d7 01       	movw	r26, r14
    78aa:	c6 01       	movw	r24, r12
    78ac:	07 2e       	mov	r0, r23
    78ae:	7b e1       	ldi	r23, 0x1B	; 27
    78b0:	b6 95       	lsr	r27
    78b2:	a7 95       	ror	r26
    78b4:	97 95       	ror	r25
    78b6:	87 95       	ror	r24
    78b8:	7a 95       	dec	r23
    78ba:	d1 f7       	brne	.-12     	; 0x78b0 <MCP2515_SetMask+0x44>
    78bc:	70 2d       	mov	r23, r0
    78be:	cc 0f       	add	r28, r28
    78c0:	cc 0f       	add	r28, r28
    78c2:	6c 2d       	mov	r22, r12
    78c4:	62 95       	swap	r22
    78c6:	66 0f       	add	r22, r22
    78c8:	60 7e       	andi	r22, 0xE0	; 224
    78ca:	86 2b       	or	r24, r22
    78cc:	68 2f       	mov	r22, r24
    78ce:	68 60       	ori	r22, 0x08	; 8
    78d0:	81 e2       	ldi	r24, 0x21	; 33
    78d2:	8c 0f       	add	r24, r28
    78d4:	0e 94 d3 3b 	call	0x77a6	; 0x77a6 <MCP2515_Write_Register>
    78d8:	c7 01       	movw	r24, r14
    78da:	b6 01       	movw	r22, r12
    78dc:	05 2e       	mov	r0, r21
    78de:	5b e0       	ldi	r21, 0x0B	; 11
    78e0:	96 95       	lsr	r25
    78e2:	87 95       	ror	r24
    78e4:	77 95       	ror	r23
    78e6:	67 95       	ror	r22
    78e8:	5a 95       	dec	r21
    78ea:	d1 f7       	brne	.-12     	; 0x78e0 <MCP2515_SetMask+0x74>
    78ec:	50 2d       	mov	r21, r0
    78ee:	83 e2       	ldi	r24, 0x23	; 35
    78f0:	8c 0f       	add	r24, r28
    78f2:	0e 94 d3 3b 	call	0x77a6	; 0x77a6 <MCP2515_Write_Register>
    78f6:	c7 01       	movw	r24, r14
    78f8:	b6 01       	movw	r22, r12
    78fa:	05 2e       	mov	r0, r21
    78fc:	53 e1       	ldi	r21, 0x13	; 19
    78fe:	96 95       	lsr	r25
    7900:	87 95       	ror	r24
    7902:	77 95       	ror	r23
    7904:	67 95       	ror	r22
    7906:	5a 95       	dec	r21
    7908:	d1 f7       	brne	.-12     	; 0x78fe <MCP2515_SetMask+0x92>
    790a:	50 2d       	mov	r21, r0
    790c:	82 e2       	ldi	r24, 0x22	; 34
    790e:	8c 0f       	add	r24, r28
    7910:	0e 94 d3 3b 	call	0x77a6	; 0x77a6 <MCP2515_Write_Register>
    7914:	1d c0       	rjmp	.+58     	; 0x7950 <MCP2515_SetMask+0xe4>
    7916:	cb 01       	movw	r24, r22
    7918:	ba 01       	movw	r22, r20
    791a:	68 94       	set
    791c:	12 f8       	bld	r1, 2
    791e:	96 95       	lsr	r25
    7920:	87 95       	ror	r24
    7922:	77 95       	ror	r23
    7924:	67 95       	ror	r22
    7926:	16 94       	lsr	r1
    7928:	d1 f7       	brne	.-12     	; 0x791e <MCP2515_SetMask+0xb2>
    792a:	2c 2f       	mov	r18, r28
    792c:	30 e0       	ldi	r19, 0x00	; 0
    792e:	28 5f       	subi	r18, 0xF8	; 248
    7930:	3f 4f       	sbci	r19, 0xFF	; 255
    7932:	82 2f       	mov	r24, r18
    7934:	88 0f       	add	r24, r24
    7936:	88 0f       	add	r24, r24
    7938:	0e 94 d3 3b 	call	0x77a6	; 0x77a6 <MCP2515_Write_Register>
    793c:	6c 2d       	mov	r22, r12
    793e:	62 95       	swap	r22
    7940:	66 0f       	add	r22, r22
    7942:	60 7e       	andi	r22, 0xE0	; 224
    7944:	8c 2f       	mov	r24, r28
    7946:	88 0f       	add	r24, r24
    7948:	88 0f       	add	r24, r24
    794a:	8f 5d       	subi	r24, 0xDF	; 223
    794c:	0e 94 d3 3b 	call	0x77a6	; 0x77a6 <MCP2515_Write_Register>
    7950:	cf 91       	pop	r28
    7952:	ff 90       	pop	r15
    7954:	ef 90       	pop	r14
    7956:	df 90       	pop	r13
    7958:	cf 90       	pop	r12
    795a:	08 95       	ret

0000795c <MCP2515_SetFilter>:
    795c:	cf 92       	push	r12
    795e:	df 92       	push	r13
    7960:	ef 92       	push	r14
    7962:	ff 92       	push	r15
    7964:	cf 93       	push	r28
    7966:	df 93       	push	r29
    7968:	c8 2f       	mov	r28, r24
    796a:	6a 01       	movw	r12, r20
    796c:	7b 01       	movw	r14, r22
    796e:	22 23       	and	r18, r18
    7970:	09 f4       	brne	.+2      	; 0x7974 <MCP2515_SetFilter+0x18>
    7972:	5c c0       	rjmp	.+184    	; 0x7a2c <MCP2515_SetFilter+0xd0>
    7974:	cb 01       	movw	r24, r22
    7976:	ba 01       	movw	r22, r20
    7978:	68 94       	set
    797a:	12 f8       	bld	r1, 2
    797c:	96 95       	lsr	r25
    797e:	87 95       	ror	r24
    7980:	77 95       	ror	r23
    7982:	67 95       	ror	r22
    7984:	16 94       	lsr	r1
    7986:	d1 f7       	brne	.-12     	; 0x797c <MCP2515_SetFilter+0x20>
    7988:	dc 2f       	mov	r29, r28
    798a:	dd 0f       	add	r29, r29
    798c:	dd 0f       	add	r29, r29
    798e:	c3 30       	cpi	r28, 0x03	; 3
    7990:	10 f0       	brcs	.+4      	; 0x7996 <MCP2515_SetFilter+0x3a>
    7992:	24 e0       	ldi	r18, 0x04	; 4
    7994:	01 c0       	rjmp	.+2      	; 0x7998 <MCP2515_SetFilter+0x3c>
    7996:	20 e0       	ldi	r18, 0x00	; 0
    7998:	82 2f       	mov	r24, r18
    799a:	8d 0f       	add	r24, r29
    799c:	0e 94 d3 3b 	call	0x77a6	; 0x77a6 <MCP2515_Write_Register>
    79a0:	8c 2d       	mov	r24, r12
    79a2:	82 95       	swap	r24
    79a4:	88 0f       	add	r24, r24
    79a6:	80 7e       	andi	r24, 0xE0	; 224
    79a8:	b7 01       	movw	r22, r14
    79aa:	a6 01       	movw	r20, r12
    79ac:	03 2e       	mov	r0, r19
    79ae:	3b e1       	ldi	r19, 0x1B	; 27
    79b0:	76 95       	lsr	r23
    79b2:	67 95       	ror	r22
    79b4:	57 95       	ror	r21
    79b6:	47 95       	ror	r20
    79b8:	3a 95       	dec	r19
    79ba:	d1 f7       	brne	.-12     	; 0x79b0 <MCP2515_SetFilter+0x54>
    79bc:	30 2d       	mov	r19, r0
    79be:	48 2b       	or	r20, r24
    79c0:	64 2f       	mov	r22, r20
    79c2:	68 60       	ori	r22, 0x08	; 8
    79c4:	c3 30       	cpi	r28, 0x03	; 3
    79c6:	10 f0       	brcs	.+4      	; 0x79cc <MCP2515_SetFilter+0x70>
    79c8:	84 e0       	ldi	r24, 0x04	; 4
    79ca:	01 c0       	rjmp	.+2      	; 0x79ce <MCP2515_SetFilter+0x72>
    79cc:	80 e0       	ldi	r24, 0x00	; 0
    79ce:	8d 0f       	add	r24, r29
    79d0:	8f 5f       	subi	r24, 0xFF	; 255
    79d2:	0e 94 d3 3b 	call	0x77a6	; 0x77a6 <MCP2515_Write_Register>
    79d6:	c7 01       	movw	r24, r14
    79d8:	b6 01       	movw	r22, r12
    79da:	05 2e       	mov	r0, r21
    79dc:	5b e0       	ldi	r21, 0x0B	; 11
    79de:	96 95       	lsr	r25
    79e0:	87 95       	ror	r24
    79e2:	77 95       	ror	r23
    79e4:	67 95       	ror	r22
    79e6:	5a 95       	dec	r21
    79e8:	d1 f7       	brne	.-12     	; 0x79de <MCP2515_SetFilter+0x82>
    79ea:	50 2d       	mov	r21, r0
    79ec:	c3 30       	cpi	r28, 0x03	; 3
    79ee:	10 f0       	brcs	.+4      	; 0x79f4 <MCP2515_SetFilter+0x98>
    79f0:	24 e0       	ldi	r18, 0x04	; 4
    79f2:	01 c0       	rjmp	.+2      	; 0x79f6 <MCP2515_SetFilter+0x9a>
    79f4:	20 e0       	ldi	r18, 0x00	; 0
    79f6:	2d 0f       	add	r18, r29
    79f8:	83 e0       	ldi	r24, 0x03	; 3
    79fa:	82 0f       	add	r24, r18
    79fc:	0e 94 d3 3b 	call	0x77a6	; 0x77a6 <MCP2515_Write_Register>
    7a00:	c7 01       	movw	r24, r14
    7a02:	b6 01       	movw	r22, r12
    7a04:	05 2e       	mov	r0, r21
    7a06:	53 e1       	ldi	r21, 0x13	; 19
    7a08:	96 95       	lsr	r25
    7a0a:	87 95       	ror	r24
    7a0c:	77 95       	ror	r23
    7a0e:	67 95       	ror	r22
    7a10:	5a 95       	dec	r21
    7a12:	d1 f7       	brne	.-12     	; 0x7a08 <MCP2515_SetFilter+0xac>
    7a14:	50 2d       	mov	r21, r0
    7a16:	c3 30       	cpi	r28, 0x03	; 3
    7a18:	10 f0       	brcs	.+4      	; 0x7a1e <MCP2515_SetFilter+0xc2>
    7a1a:	24 e0       	ldi	r18, 0x04	; 4
    7a1c:	01 c0       	rjmp	.+2      	; 0x7a20 <MCP2515_SetFilter+0xc4>
    7a1e:	20 e0       	ldi	r18, 0x00	; 0
    7a20:	2d 0f       	add	r18, r29
    7a22:	82 e0       	ldi	r24, 0x02	; 2
    7a24:	82 0f       	add	r24, r18
    7a26:	0e 94 d3 3b 	call	0x77a6	; 0x77a6 <MCP2515_Write_Register>
    7a2a:	23 c0       	rjmp	.+70     	; 0x7a72 <MCP2515_SetFilter+0x116>
    7a2c:	cb 01       	movw	r24, r22
    7a2e:	ba 01       	movw	r22, r20
    7a30:	68 94       	set
    7a32:	12 f8       	bld	r1, 2
    7a34:	96 95       	lsr	r25
    7a36:	87 95       	ror	r24
    7a38:	77 95       	ror	r23
    7a3a:	67 95       	ror	r22
    7a3c:	16 94       	lsr	r1
    7a3e:	d1 f7       	brne	.-12     	; 0x7a34 <MCP2515_SetFilter+0xd8>
    7a40:	dc 2f       	mov	r29, r28
    7a42:	dd 0f       	add	r29, r29
    7a44:	dd 0f       	add	r29, r29
    7a46:	c3 30       	cpi	r28, 0x03	; 3
    7a48:	10 f0       	brcs	.+4      	; 0x7a4e <MCP2515_SetFilter+0xf2>
    7a4a:	24 e0       	ldi	r18, 0x04	; 4
    7a4c:	01 c0       	rjmp	.+2      	; 0x7a50 <MCP2515_SetFilter+0xf4>
    7a4e:	20 e0       	ldi	r18, 0x00	; 0
    7a50:	82 2f       	mov	r24, r18
    7a52:	8d 0f       	add	r24, r29
    7a54:	0e 94 d3 3b 	call	0x77a6	; 0x77a6 <MCP2515_Write_Register>
    7a58:	6c 2d       	mov	r22, r12
    7a5a:	62 95       	swap	r22
    7a5c:	66 0f       	add	r22, r22
    7a5e:	60 7e       	andi	r22, 0xE0	; 224
    7a60:	c3 30       	cpi	r28, 0x03	; 3
    7a62:	10 f0       	brcs	.+4      	; 0x7a68 <MCP2515_SetFilter+0x10c>
    7a64:	84 e0       	ldi	r24, 0x04	; 4
    7a66:	01 c0       	rjmp	.+2      	; 0x7a6a <MCP2515_SetFilter+0x10e>
    7a68:	80 e0       	ldi	r24, 0x00	; 0
    7a6a:	8d 0f       	add	r24, r29
    7a6c:	8f 5f       	subi	r24, 0xFF	; 255
    7a6e:	0e 94 d3 3b 	call	0x77a6	; 0x77a6 <MCP2515_Write_Register>
    7a72:	df 91       	pop	r29
    7a74:	cf 91       	pop	r28
    7a76:	ff 90       	pop	r15
    7a78:	ef 90       	pop	r14
    7a7a:	df 90       	pop	r13
    7a7c:	cf 90       	pop	r12
    7a7e:	08 95       	ret

00007a80 <MCP2515_Enable_Interrupt>:
    7a80:	cf 93       	push	r28
    7a82:	df 93       	push	r29
    7a84:	00 d0       	rcall	.+0      	; 0x7a86 <MCP2515_Enable_Interrupt+0x6>
    7a86:	1f 92       	push	r1
    7a88:	cd b7       	in	r28, 0x3d	; 61
    7a8a:	de b7       	in	r29, 0x3e	; 62
    7a8c:	92 e0       	ldi	r25, 0x02	; 2
    7a8e:	99 83       	std	Y+1, r25	; 0x01
    7a90:	9b e2       	ldi	r25, 0x2B	; 43
    7a92:	9a 83       	std	Y+2, r25	; 0x02
    7a94:	8b 83       	std	Y+3, r24	; 0x03
    7a96:	43 e0       	ldi	r20, 0x03	; 3
    7a98:	50 e0       	ldi	r21, 0x00	; 0
    7a9a:	be 01       	movw	r22, r28
    7a9c:	6f 5f       	subi	r22, 0xFF	; 255
    7a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    7aa0:	8a e9       	ldi	r24, 0x9A	; 154
    7aa2:	90 e0       	ldi	r25, 0x00	; 0
    7aa4:	0e 94 08 3a 	call	0x7410	; 0x7410 <HAL_SPI_Transmit>
    7aa8:	0f 90       	pop	r0
    7aaa:	0f 90       	pop	r0
    7aac:	0f 90       	pop	r0
    7aae:	df 91       	pop	r29
    7ab0:	cf 91       	pop	r28
    7ab2:	08 95       	ret

00007ab4 <MCP2515_init>:
    7ab4:	e8 e9       	ldi	r30, 0x98	; 152
    7ab6:	f0 e0       	ldi	r31, 0x00	; 0
    7ab8:	81 e0       	ldi	r24, 0x01	; 1
    7aba:	80 83       	st	Z, r24
    7abc:	11 82       	std	Z+1, r1	; 0x01
    7abe:	ea e9       	ldi	r30, 0x9A	; 154
    7ac0:	f0 e0       	ldi	r31, 0x00	; 0
    7ac2:	80 e1       	ldi	r24, 0x10	; 16
    7ac4:	80 83       	st	Z, r24
    7ac6:	84 e1       	ldi	r24, 0x14	; 20
    7ac8:	83 83       	std	Z+3, r24	; 0x03
    7aca:	cf 01       	movw	r24, r30
    7acc:	0e 94 a6 39 	call	0x734c	; 0x734c <HAL_SPI_Init>
    7ad0:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <MCP2515_Rest>
    7ad4:	83 e0       	ldi	r24, 0x03	; 3
    7ad6:	0e 94 40 3d 	call	0x7a80	; 0x7a80 <MCP2515_Enable_Interrupt>
    7ada:	80 e8       	ldi	r24, 0x80	; 128
    7adc:	0e 94 1c 3c 	call	0x7838	; 0x7838 <MCP2515_Set_OperMode>
    7ae0:	47 e8       	ldi	r20, 0x87	; 135
    7ae2:	6a ef       	ldi	r22, 0xFA	; 250
    7ae4:	83 e0       	ldi	r24, 0x03	; 3
    7ae6:	0e 94 09 3c 	call	0x7812	; 0x7812 <MCP2515_SetBitTiming>
    7aea:	21 e0       	ldi	r18, 0x01	; 1
    7aec:	40 e0       	ldi	r20, 0x00	; 0
    7aee:	50 e0       	ldi	r21, 0x00	; 0
    7af0:	ba 01       	movw	r22, r20
    7af2:	80 e0       	ldi	r24, 0x00	; 0
    7af4:	0e 94 ae 3c 	call	0x795c	; 0x795c <MCP2515_SetFilter>
    7af8:	21 e0       	ldi	r18, 0x01	; 1
    7afa:	40 e0       	ldi	r20, 0x00	; 0
    7afc:	50 e0       	ldi	r21, 0x00	; 0
    7afe:	ba 01       	movw	r22, r20
    7b00:	80 e0       	ldi	r24, 0x00	; 0
    7b02:	0e 94 36 3c 	call	0x786c	; 0x786c <MCP2515_SetMask>
    7b06:	67 e0       	ldi	r22, 0x07	; 7
    7b08:	8d e0       	ldi	r24, 0x0D	; 13
    7b0a:	0e 94 d3 3b 	call	0x77a6	; 0x77a6 <MCP2515_Write_Register>
    7b0e:	80 e0       	ldi	r24, 0x00	; 0
    7b10:	0e 94 1c 3c 	call	0x7838	; 0x7838 <MCP2515_Set_OperMode>
    7b14:	88 e9       	ldi	r24, 0x98	; 152
    7b16:	90 e0       	ldi	r25, 0x00	; 0
    7b18:	0e 94 39 39 	call	0x7272	; 0x7272 <EXTI_Init>
    7b1c:	08 95       	ret

00007b1e <MCP2515_receiveMesg>:
 * param : RecievedMesg pointer to struct that will hold all receive message information 
 * return : bool if false means their is no pending message to read   
 */

PUBLIC bool MCP2515_receiveMesg(CANMesg_t * RecievedMesg)
{
    7b1e:	ef 92       	push	r14
    7b20:	ff 92       	push	r15
    7b22:	0f 93       	push	r16
    7b24:	1f 93       	push	r17
    7b26:	cf 93       	push	r28
    7b28:	df 93       	push	r29
    7b2a:	7c 01       	movw	r14, r24
	uint8_t CANReaddata =0,MAilBoxNum =0,iterator=0 ;
	CANReaddata = MCP2515_Read_Register(CANINTF);
    7b2c:	8c e2       	ldi	r24, 0x2C	; 44
    7b2e:	0e 94 b8 3b 	call	0x7770	; 0x7770 <MCP2515_Read_Register>
	if((CANReaddata & 0x01))
    7b32:	80 fd       	sbrc	r24, 0
    7b34:	04 c0       	rjmp	.+8      	; 0x7b3e <MCP2515_receiveMesg+0x20>
	{
		MAilBoxNum = 0 ;
	}
	else if((CANReaddata & 0x02)) /* means there is message is in Mailbox1 */
    7b36:	81 ff       	sbrs	r24, 1
    7b38:	5b c0       	rjmp	.+182    	; 0x7bf0 <MCP2515_receiveMesg+0xd2>
	{
		MAilBoxNum = 1 ;
    7b3a:	d1 e0       	ldi	r29, 0x01	; 1
    7b3c:	01 c0       	rjmp	.+2      	; 0x7b40 <MCP2515_receiveMesg+0x22>
{
	uint8_t CANReaddata =0,MAilBoxNum =0,iterator=0 ;
	CANReaddata = MCP2515_Read_Register(CANINTF);
	if((CANReaddata & 0x01))
	{
		MAilBoxNum = 0 ;
    7b3e:	d0 e0       	ldi	r29, 0x00	; 0
	}
	else{
		return 0 ;
	}

	CANReaddata = MCP2515_Read_Register(CANSTAT);
    7b40:	8e e0       	ldi	r24, 0x0E	; 14
    7b42:	0e 94 b8 3b 	call	0x7770	; 0x7770 <MCP2515_Read_Register>
	RecievedMesg->CANControl.RTR_Field = (CANReaddata & 0x40)>>6 ;
    7b46:	80 74       	andi	r24, 0x40	; 64
    7b48:	90 e0       	ldi	r25, 0x00	; 0
    7b4a:	08 2e       	mov	r0, r24
    7b4c:	89 2f       	mov	r24, r25
    7b4e:	00 0c       	add	r0, r0
    7b50:	88 1f       	adc	r24, r24
    7b52:	99 0b       	sbc	r25, r25
    7b54:	00 0c       	add	r0, r0
    7b56:	88 1f       	adc	r24, r24
    7b58:	99 1f       	adc	r25, r25
    7b5a:	f7 01       	movw	r30, r14
    7b5c:	94 81       	ldd	r25, Z+4	; 0x04
    7b5e:	80 fb       	bst	r24, 0
    7b60:	95 f9       	bld	r25, 5
    7b62:	94 83       	std	Z+4, r25	; 0x04
	CANReaddata = MCP2515_Read_Register(RXBnSIDL(MAilBoxNum));
    7b64:	d2 95       	swap	r29
    7b66:	d0 7f       	andi	r29, 0xF0	; 240
    7b68:	82 e6       	ldi	r24, 0x62	; 98
    7b6a:	8d 0f       	add	r24, r29
    7b6c:	0e 94 b8 3b 	call	0x7770	; 0x7770 <MCP2515_Read_Register>
    7b70:	c8 2f       	mov	r28, r24
	RecievedMesg->CANControl.EXT_Field = (CANReaddata & 0x08 )>>3 ;
    7b72:	88 70       	andi	r24, 0x08	; 8
    7b74:	90 e0       	ldi	r25, 0x00	; 0
    7b76:	95 95       	asr	r25
    7b78:	87 95       	ror	r24
    7b7a:	95 95       	asr	r25
    7b7c:	87 95       	ror	r24
    7b7e:	95 95       	asr	r25
    7b80:	87 95       	ror	r24
    7b82:	f7 01       	movw	r30, r14
    7b84:	94 81       	ldd	r25, Z+4	; 0x04
    7b86:	80 fb       	bst	r24, 0
    7b88:	94 f9       	bld	r25, 4
    7b8a:	94 83       	std	Z+4, r25	; 0x04
	RecievedMesg->ID  = MCP2515_Read_Register(RXBnSIDH(MAilBoxNum));
    7b8c:	81 e6       	ldi	r24, 0x61	; 97
    7b8e:	8d 0f       	add	r24, r29
    7b90:	0e 94 b8 3b 	call	0x7770	; 0x7770 <MCP2515_Read_Register>
    7b94:	90 e0       	ldi	r25, 0x00	; 0
    7b96:	a0 e0       	ldi	r26, 0x00	; 0
    7b98:	b0 e0       	ldi	r27, 0x00	; 0
	RecievedMesg->ID  = (((uint32_t)RecievedMesg->ID<<3)|(CANReaddata>>5));
    7b9a:	88 0f       	add	r24, r24
    7b9c:	99 1f       	adc	r25, r25
    7b9e:	aa 1f       	adc	r26, r26
    7ba0:	bb 1f       	adc	r27, r27
    7ba2:	88 0f       	add	r24, r24
    7ba4:	99 1f       	adc	r25, r25
    7ba6:	aa 1f       	adc	r26, r26
    7ba8:	bb 1f       	adc	r27, r27
    7baa:	88 0f       	add	r24, r24
    7bac:	99 1f       	adc	r25, r25
    7bae:	aa 1f       	adc	r26, r26
    7bb0:	bb 1f       	adc	r27, r27
    7bb2:	c2 95       	swap	r28
    7bb4:	c6 95       	lsr	r28
    7bb6:	c7 70       	andi	r28, 0x07	; 7
    7bb8:	8c 2b       	or	r24, r28
    7bba:	f7 01       	movw	r30, r14
    7bbc:	80 83       	st	Z, r24
    7bbe:	91 83       	std	Z+1, r25	; 0x01
    7bc0:	a2 83       	std	Z+2, r26	; 0x02
    7bc2:	b3 83       	std	Z+3, r27	; 0x03
 * return : bool if false means their is no pending message to read   
 */

PUBLIC bool MCP2515_receiveMesg(CANMesg_t * RecievedMesg)
{
	uint8_t CANReaddata =0,MAilBoxNum =0,iterator=0 ;
    7bc4:	c0 e0       	ldi	r28, 0x00	; 0
	RecievedMesg->CANControl.EXT_Field = (CANReaddata & 0x08 )>>3 ;
	RecievedMesg->ID  = MCP2515_Read_Register(RXBnSIDH(MAilBoxNum));
	RecievedMesg->ID  = (((uint32_t)RecievedMesg->ID<<3)|(CANReaddata>>5));
	
	
	while(iterator != 8)
    7bc6:	0c c0       	rjmp	.+24     	; 0x7be0 <MCP2515_receiveMesg+0xc2>
	{
		RecievedMesg->MesgData[iterator] = MCP2515_Read_Register(RXBnDm(MAilBoxNum,iterator));
    7bc8:	0c 2f       	mov	r16, r28
    7bca:	10 e0       	ldi	r17, 0x00	; 0
    7bcc:	8c 2f       	mov	r24, r28
    7bce:	8d 0f       	add	r24, r29
    7bd0:	8a 59       	subi	r24, 0x9A	; 154
    7bd2:	0e 94 b8 3b 	call	0x7770	; 0x7770 <MCP2515_Read_Register>
    7bd6:	f7 01       	movw	r30, r14
    7bd8:	e0 0f       	add	r30, r16
    7bda:	f1 1f       	adc	r31, r17
    7bdc:	85 83       	std	Z+5, r24	; 0x05
		iterator++;
    7bde:	cf 5f       	subi	r28, 0xFF	; 255
	RecievedMesg->CANControl.EXT_Field = (CANReaddata & 0x08 )>>3 ;
	RecievedMesg->ID  = MCP2515_Read_Register(RXBnSIDH(MAilBoxNum));
	RecievedMesg->ID  = (((uint32_t)RecievedMesg->ID<<3)|(CANReaddata>>5));
	
	
	while(iterator != 8)
    7be0:	c8 30       	cpi	r28, 0x08	; 8
    7be2:	91 f7       	brne	.-28     	; 0x7bc8 <MCP2515_receiveMesg+0xaa>
	{
		RecievedMesg->MesgData[iterator] = MCP2515_Read_Register(RXBnDm(MAilBoxNum,iterator));
		iterator++;
	}

	MCP2515_Write_Register(CANINTF , 0x00 ); /* FIRST CLESR FLAG */
    7be4:	60 e0       	ldi	r22, 0x00	; 0
    7be6:	8c e2       	ldi	r24, 0x2C	; 44
    7be8:	0e 94 d3 3b 	call	0x77a6	; 0x77a6 <MCP2515_Write_Register>
	return true ;
    7bec:	81 e0       	ldi	r24, 0x01	; 1
    7bee:	01 c0       	rjmp	.+2      	; 0x7bf2 <MCP2515_receiveMesg+0xd4>
	else if((CANReaddata & 0x02)) /* means there is message is in Mailbox1 */
	{
		MAilBoxNum = 1 ;
	}
	else{
		return 0 ;
    7bf0:	80 e0       	ldi	r24, 0x00	; 0
		iterator++;
	}

	MCP2515_Write_Register(CANINTF , 0x00 ); /* FIRST CLESR FLAG */
	return true ;
    7bf2:	df 91       	pop	r29
    7bf4:	cf 91       	pop	r28
    7bf6:	1f 91       	pop	r17
    7bf8:	0f 91       	pop	r16
    7bfa:	ff 90       	pop	r15
    7bfc:	ef 90       	pop	r14
    7bfe:	08 95       	ret

00007c00 <eeprom_read_byte>:
    7c00:	e1 99       	sbic	0x1c, 1	; 28
    7c02:	fe cf       	rjmp	.-4      	; 0x7c00 <eeprom_read_byte>
    7c04:	9f bb       	out	0x1f, r25	; 31
    7c06:	8e bb       	out	0x1e, r24	; 30
    7c08:	e0 9a       	sbi	0x1c, 0	; 28
    7c0a:	99 27       	eor	r25, r25
    7c0c:	8d b3       	in	r24, 0x1d	; 29
    7c0e:	08 95       	ret

00007c10 <eeprom_write_block>:
    7c10:	dc 01       	movw	r26, r24
    7c12:	cb 01       	movw	r24, r22
    7c14:	03 c0       	rjmp	.+6      	; 0x7c1c <eeprom_write_block+0xc>
    7c16:	2d 91       	ld	r18, X+
    7c18:	0e 94 13 3e 	call	0x7c26	; 0x7c26 <eeprom_write_r18>
    7c1c:	41 50       	subi	r20, 0x01	; 1
    7c1e:	50 40       	sbci	r21, 0x00	; 0
    7c20:	d0 f7       	brcc	.-12     	; 0x7c16 <eeprom_write_block+0x6>
    7c22:	08 95       	ret

00007c24 <eeprom_write_byte>:
    7c24:	26 2f       	mov	r18, r22

00007c26 <eeprom_write_r18>:
    7c26:	e1 99       	sbic	0x1c, 1	; 28
    7c28:	fe cf       	rjmp	.-4      	; 0x7c26 <eeprom_write_r18>
    7c2a:	9f bb       	out	0x1f, r25	; 31
    7c2c:	8e bb       	out	0x1e, r24	; 30
    7c2e:	2d bb       	out	0x1d, r18	; 29
    7c30:	0f b6       	in	r0, 0x3f	; 63
    7c32:	f8 94       	cli
    7c34:	e2 9a       	sbi	0x1c, 2	; 28
    7c36:	e1 9a       	sbi	0x1c, 1	; 28
    7c38:	0f be       	out	0x3f, r0	; 63
    7c3a:	01 96       	adiw	r24, 0x01	; 1
    7c3c:	08 95       	ret

00007c3e <_exit>:
    7c3e:	f8 94       	cli

00007c40 <__stop_program>:
    7c40:	ff cf       	rjmp	.-2      	; 0x7c40 <__stop_program>
